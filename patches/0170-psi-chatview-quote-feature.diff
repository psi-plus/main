--- a/src/chatview_te.cpp
+++ b/src/chatview_te.cpp
@@ -36,6 +36,7 @@
 #include <QTimer>
 #include <QKeyEvent>
 #include <QUrl>
+#include <QMenu>
 #include <QTextBlock>
 #include <QTextDocumentFragment>
 //#define CORRECTION_DEBUG
@@ -67,6 +68,12 @@ ChatView::ChatView(QWidget *parent)
     connect(this, SIGNAL(selectionChanged()), SLOT(autoCopy()));
     connect(this, SIGNAL(cursorPositionChanged()), SLOT(autoCopy()));
 #endif
+    actQuote_ = new QAction(tr("Quote"), this);
+    actQuote_->setEnabled(false);
+    actQuote_->setShortcut(QKeySequence(tr("Ctrl+S")));
+    addAction(actQuote_);
+    connect(actQuote_, SIGNAL(triggered()), SLOT(quoteEvent()));
+    connect(this, SIGNAL(selectionChanged()), SLOT(changeActQuoteState()));
 
     useMessageIcons_ = PsiOptions::instance()->getOption("options.ui.chat.use-message-icons").toBool();
     if (useMessageIcons_) {
@@ -148,10 +155,20 @@ void ChatView::contextMenuEvent(QContextMenuEvent *e)
         e->accept();
     }
     else {
-        PsiTextView::contextMenuEvent(e);
+        QMenu *menu = createStandardContextMenu(e->pos());
+        menu->exec(e->globalPos());
+        delete menu;
+        e->accept();
     }
 }
 
+QMenu* ChatView::createStandardContextMenu(const QPoint &position)
+{
+    QMenu *menu = PsiTextView::createStandardContextMenu(position);
+    menu->addAction(actQuote_);
+    return menu;
+}
+
 void ChatView::addLogIconsResources()
 {
     document()->addResource(QTextDocument::ImageResource, QUrl("icon:log_icon_receive"), logIconReceive);
@@ -217,6 +234,24 @@ void ChatView::autoCopy()
     }
 }
 
+/**
+ * Make quote from any selected text and paste it in chat window
+ */
+
+void ChatView::quoteEvent()
+{
+    emit quote(getPlainText());
+}
+
+/**
+ * Enable or disable actQuote_ in relations from hasSelection()
+ */
+
+void ChatView::changeActQuoteState()
+{
+    actQuote_->setEnabled(textCursor().hasSelection());
+}
+
 /**
  * Handle KeyPress events that happen in ChatEdit widget. This is used
  * to 'fix' the copy shortcut.
--- a/src/chatview_te.h
+++ b/src/chatview_te.h
@@ -51,6 +51,7 @@ public:
     QSize sizeHint() const;
     void clear();
     void contextMenuEvent(QContextMenuEvent *e);
+    QMenu* createStandardContextMenu(const QPoint &position);
 
     void init();
     void setDialog(QWidget* dialog);
@@ -92,12 +93,15 @@ protected:
 
 protected slots:
     void autoCopy();
+    void quoteEvent();
+    void changeActQuoteState();
 
 private slots:
     void slotScroll();
 
 signals:
     void showNM(const QString&);
+    void quote(const QString &text);
     void nickInsertClick(const QString &nick);
 
 private:
@@ -120,6 +124,7 @@ private:
     QPixmap logIconInfo;
     QPixmap logIconCorrected;
     QPixmap logIconHistory;
+    QAction *actQuote_;
 };
 
 #endif
--- a/src/groupchatdlg.cpp
+++ b/src/groupchatdlg.cpp
@@ -1052,6 +1052,7 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, const Jid &j, TabManager *tabManager)
     invalidateTab();
     setConnecting();
 
+    connect(ui_.log->textWidget(), SIGNAL(quote(const QString &)), ui_.mle->chatEdit(), SLOT(insertAsQuote(const QString &)));
     connect(pa->avatarFactory(), SIGNAL(avatarChanged(Jid)), SLOT(avatarUpdated(Jid)));
 
 #ifdef PSI_PLUGINS
--- a/src/msgmle.cpp
+++ b/src/msgmle.cpp
@@ -33,6 +33,7 @@
 #include <QTextDocument>
 #include <QTimer>
 #include <QMimeData>
+#include <QClipboard>
 
 #include "shortcutmanager.h"
 #include "spellchecker/spellhighlighter.h"
@@ -221,6 +222,13 @@ void ChatEdit::initActions()
     act_changeCase = new QAction(this);
     addAction(act_changeCase);
     connect(act_changeCase, SIGNAL(triggered()), capitalizer_, SLOT(changeCase()));
+
+    QClipboard *clipboard = QApplication::clipboard();
+    actPasteAsQuote_ = new QAction(tr("Paste as Quotation"), this);
+    actPasteAsQuote_->setEnabled(clipboard->mimeData()->hasText());
+    addAction(actPasteAsQuote_);
+    connect(actPasteAsQuote_, SIGNAL(triggered()), SLOT(pasteAsQuote()));
+    connect(clipboard, SIGNAL(dataChanged()), SLOT(changeActPasteAsQuoteState()));
 }
 
 void ChatEdit::setShortcuts()
@@ -248,6 +256,13 @@ void ChatEdit::setFont(const QFont &f)
     controller_->setFont(f);
 }
 
+QMenu* ChatEdit::createStandardContextMenu(const QPoint &position)
+{
+    QMenu *menu = QTextEdit::createStandardContextMenu(position);
+    menu->addAction(actPasteAsQuote_);
+    return menu;
+}
+
 bool ChatEdit::checkSpellingGloballyEnabled()
 {
     return (SpellChecker::instance()->available() && PsiOptions::instance()->getOption("options.ui.spell-check.enabled").toBool());
@@ -351,8 +366,10 @@ void ChatEdit::contextMenuEvent(QContextMenuEvent *e)
         }
     }
 
-    // Do normal menu
-    QTextEdit::contextMenuEvent(e);
+    // Do custom menu
+    QMenu *menu = createStandardContextMenu(e->pos());
+    menu->exec(e->globalPos());
+    delete menu;
     e->accept();
 }
 
@@ -430,6 +447,18 @@ void ChatEdit::showHistoryMessageNext()
     }
 }
 
+void ChatEdit::changeActPasteAsQuoteState()
+{
+    QClipboard *clipboard = QApplication::clipboard();
+    actPasteAsQuote_->setEnabled(clipboard->mimeData()->hasText());
+}
+
+void ChatEdit::pasteAsQuote()
+{
+    QString text = QApplication::clipboard()->mimeData()->text();
+    insertAsQuote(text);
+}
+
 void ChatEdit::showHistoryMessagePrev()
 {
     if (!typedMsgsHistory.isEmpty() && (typedMsgsIndex > 0 || correction)) {
@@ -563,6 +592,24 @@ void ChatEdit::setCssString(const QString &css) {
     controller_->setCssString(css);
 }
 
+void ChatEdit::insertAsQuote(const QString &text)
+{
+    int pos =  textCursor().position();
+    QString prevLine = toPlainText().left(pos - 1);
+    prevLine = prevLine.mid(prevLine.lastIndexOf("\n") + 1);
+
+    QString quote = QString::fromUtf8("» ") + text;
+    quote.replace("\n", QString::fromUtf8("\n» "));
+
+    // Check for previous quote and merge if true
+    if(!prevLine.startsWith(QString::fromUtf8("»"))) {
+        quote.prepend("\n");
+    }
+    quote.append("\n");
+    insertPlainText(quote);
+}
+
+
 //----------------------------------------------------------------------------
 // LineEdit
 //----------------------------------------------------------------------------
--- a/src/msgmle.h
+++ b/src/msgmle.h
@@ -54,6 +54,7 @@ public:
     // reimplemented
     QSize sizeHint() const;
     void setFont(const QFont &);
+    QMenu* createStandardContextMenu(const QPoint &position);
 
     static bool checkSpellingGloballyEnabled();
     void setCheckSpelling(bool);
@@ -69,6 +70,7 @@ public slots:
     void clearMessageHistory();
     void doHTMLTextMenu();
     void setCssString(const QString& css);
+    void insertAsQuote(const QString& text);
 
 protected slots:
     void applySuggestion();
@@ -78,6 +80,8 @@ protected slots:
     void showHistoryMessagePrev();
     void showHistoryMessageFirst();
     void showHistoryMessageLast();
+    void changeActPasteAsQuoteState();
+    void pasteAsQuote();
 
 signals:
     void imagePasted(const QImage &);
@@ -107,6 +111,7 @@ private:
     QAction* act_showMessageFirst = nullptr;
     QAction* act_showMessageLast = nullptr;
     QAction* act_changeCase = nullptr;
+    QAction *actPasteAsQuote_ = nullptr;
     QString currentText;
     HTMLTextController *controller_ = nullptr;
     CapitalLettersController *capitalizer_ = nullptr;
--- a/src/psichatdlg.cpp
+++ b/src/psichatdlg.cpp
@@ -282,6 +282,8 @@ void PsiChatDlg::initUi()
     connect(act_mini_cmd_, SIGNAL(triggered()), SLOT(doMiniCmd()));
     addAction(act_mini_cmd_);
 
+    connect(ui_.log->textWidget(), SIGNAL(quote(const QString &)), ui_.mle->chatEdit(), SLOT(insertAsQuote(const QString &)));
+
     act_pastesend_ = new IconAction(tr("Paste and Send"), "psi/action_paste_and_send", tr("Paste and Send"), 0, this);
     connect(act_pastesend_, SIGNAL(triggered()), SLOT(doPasteAndSend()));
 
--- a/src/webview.cpp
+++ b/src/webview.cpp
@@ -76,6 +76,11 @@ WebView::WebView(QWidget* parent) :
 #endif
     connect(page(), SIGNAL(loadStarted()), this, SLOT(loadStartedEvent()));
     connect(page(), SIGNAL(loadFinished(bool)), this, SLOT(loadFinishedEvent(bool)));
+
+    actQuote_ = new QAction(tr("Quote"), this);
+    actQuote_->setShortcut(QKeySequence(tr("Ctrl+S")));
+    addAction(actQuote_);
+    connect(actQuote_, SIGNAL(triggered()), SLOT(quoteEvent()));
 }
 
 void WebView::linkClickedEvent(const QUrl& url)
@@ -99,6 +104,11 @@ void WebView::loadFinishedEvent(bool success)
     isLoading_ = false;
 }
 
+void WebView::quoteEvent()
+{
+    emit quote(selectedText());
+}
+
 void WebView::contextMenuEvent(QContextMenuEvent* event)
 {
     if (isLoading_) return;
@@ -139,6 +149,7 @@ void WebView::contextMenuEvent(QContextMenuEvent* event)
     menu->addAction(pageAction(QWebEnginePage::Reload));
 #else
             menu->addAction(pageAction(QWebPage::Copy));
+            menu->addAction(actQuote_);
         } else {
             if (!menu->isEmpty()) {
                 menu->addSeparator();
--- a/src/webview.h
+++ b/src/webview.h
@@ -85,13 +85,17 @@ private:
     bool isLoading_;
     QStringList jsBuffer_;
     QPoint dragStartPosition;
+    QAction *actQuote_;
 
+signals:
+    void quote(const QString &text);
 
 protected slots:
     void linkClickedEvent(const QUrl& url);
     void textCopiedEvent();
     void loadStartedEvent();
     void loadFinishedEvent(bool);
+    void quoteEvent();
 };
 
 
--- a/src/widgets/psitextview.cpp
+++ b/src/widgets/psitextview.cpp
@@ -25,6 +25,7 @@
 #include <QAbstractTextDocumentLayout>
 #include <QTextDocumentFragment>
 #include <QTextFragment>
+#include <QRegExp>
 #include <QMimeData>
 
 #include "urlobject.h"
@@ -79,6 +80,54 @@ PsiTextView::PsiTextView(QWidget *parent)
     viewport()->setMouseTracking(true); // we want to get all mouseMoveEvents
 }
 
+ /**
+ * Reimplemented createStandardContextMenu(const QPoint &position)
+ * for creating of custom context menu
+ */
+
+QMenu* PsiTextView::createStandardContextMenu(const QPoint &position)
+{
+    QTextCursor textcursor = cursorForPosition(position);
+    QMenu *menu;
+    QString anc = anchorAt(position);
+    if (!anc.isEmpty()) {
+        menu = URLObject::getInstance()->createPopupMenu(anc);
+
+        int posInBlock = textcursor.position() - textcursor.block().position();
+        QString textblock = textcursor.block().text();
+        int begin = textcursor.block().position() + textblock.lastIndexOf(QRegExp("\\s|^"), posInBlock) + 1;
+        int end = textcursor.block().position() + textblock.indexOf(QRegExp("\\s|$"), posInBlock);
+        textcursor.setPosition(begin);
+        textcursor.setPosition(end, QTextCursor::KeepAnchor);
+        setTextCursor(textcursor);
+
+        menu = URLObject::getInstance()->createPopupMenu(anc);
+    }
+    else {
+        if (isSelectedBlock() || !textCursor().hasSelection()) { // only if no selection we select text block
+            int begin = textcursor.block().position();
+            int end = begin + textcursor.block().length() - 1;
+            textcursor.setPosition(begin);
+            textcursor.setPosition(end, QTextCursor::KeepAnchor);
+            setTextCursor(textcursor);
+        }
+        menu = QTextEdit::createStandardContextMenu();
+    }
+    return menu;
+}
+
+bool PsiTextView::isSelectedBlock()
+{
+    if (textCursor().hasSelection()) {
+        const QTextCursor &cursor = textCursor();
+        const QTextBlock  &block  = cursor.block();
+        int start = cursor.selectionStart();
+        if (block.position() == start && block.length() == cursor.selectionEnd() - start + 1)
+            return true;
+    }
+    return false;
+}
+
 /**
  * This function returns true if vertical scroll bar is
  * at its maximum position.
@@ -183,11 +232,7 @@ QString PsiTextView::getPlainText() const
 
 void PsiTextView::contextMenuEvent(QContextMenuEvent *e)
 {
-    QMenu *menu;
-    if (!anchorAt(e->pos()).isEmpty())
-        menu = URLObject::getInstance()->createPopupMenu(anchorAt(e->pos()));
-    else
-        menu = createStandardContextMenu();
+    QMenu *menu = createStandardContextMenu(e->pos());
     menu->exec(e->globalPos());
     e->accept();
     delete menu;
--- a/src/widgets/psitextview.h
+++ b/src/widgets/psitextview.h
@@ -32,6 +32,9 @@ class PsiTextView : public QTextEdit
 public:
     PsiTextView(QWidget *parent = 0);
 
+    // Reimplemented
+    QMenu* createStandardContextMenu(const QPoint &position);
+
     bool atBottom();
 
     virtual void appendText(const QString &text);
@@ -69,6 +72,7 @@ protected:
     class Private;
 private:
     Private *d;
+    bool isSelectedBlock();
 };
 
 #endif
