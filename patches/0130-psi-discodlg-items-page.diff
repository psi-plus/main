--- git.orig/options/default.xml
+++ git/options/default.xml
@@ -493,6 +493,7 @@ QLineEdit#le_status_text {
             <service-discovery>
                 <automatically-get-info type="bool">false</automatically-get-info>
                 <automatically-get-items type="bool">false</automatically-get-items>
+                <items-per-page type="int" comment="Number of items per page for page-by-page feature (XEP-0059). 0 turns this feature off.">0</items-per-page>
                 <recent-jids type="QStringList" />
             </service-discovery>
             <tabs>
--- git.orig/src/discodlg.cpp
+++ git/src/discodlg.cpp
@@ -55,6 +55,8 @@
 
 //----------------------------------------------------------------------------
 
+#define MoreItemsType QTreeWidgetItem::UserType
+
 PsiIcon category2icon(PsiAccount *acc, const Jid &jid, const QString &category, const QString &type, int status=STATUS_ONLINE)
 {
     // TODO: update this to http://www.jabber.org/registrar/disco-categories.html#gateway
@@ -174,10 +176,70 @@ struct DiscoData {
 };
 
 //----------------------------------------------------------------------------
+// DiscoBaseItem
+//----------------------------------------------------------------------------
+class DiscoBaseItem : public QObject, public QTreeWidgetItem
+{
+public:
+    DiscoBaseItem(QTreeWidget *parent, int type = Type);
+    DiscoBaseItem(QTreeWidgetItem *parent, int type = Type);
+    ~DiscoBaseItem() {}
+
+    virtual const DiscoItem &item() const;
+    virtual void itemSelected() {}
+    virtual void itemClicked() {}
+
+    virtual bool operator<(const QTreeWidgetItem &other) const;
+};
+
+DiscoBaseItem::DiscoBaseItem(QTreeWidget *parent, int type)
+    : QTreeWidgetItem(parent, type)
+{
+}
+
+DiscoBaseItem::DiscoBaseItem(QTreeWidgetItem *parent, int type)
+    : QTreeWidgetItem(parent, type)
+{
+}
+
+const DiscoItem &DiscoBaseItem::item() const {
+    static DiscoItem di;
+    return di;
+}
+
+bool DiscoBaseItem::operator<(const QTreeWidgetItem &other) const
+{
+    if (type() == MoreItemsType || other.type() == MoreItemsType) {
+        return type() < other.type() && treeWidget()->header()->sortIndicatorOrder() == Qt::AscendingOrder;
+    }
+    return QTreeWidgetItem::operator<(other);
+}
+
+
+//----------------------------------------------------------------------------
+// DiscoExtraItem
+//----------------------------------------------------------------------------
+
+class DiscoListItem;
+class DiscoExtraItem : public DiscoBaseItem
+{
+public:
+    DiscoExtraItem(DiscoListItem *parent, const QString &text);
+    virtual ~DiscoExtraItem(){}
+
+    virtual void itemClicked();
+private:
+    void init(const QString &text);
+private:
+    DiscoListItem *_parent;
+};
+
+
+//----------------------------------------------------------------------------
 // DiscoListItem
 //----------------------------------------------------------------------------
 
-class DiscoListItem : public QObject, public QTreeWidgetItem
+class DiscoListItem : public DiscoBaseItem
 {
     Q_OBJECT
 public:
@@ -192,7 +254,7 @@ public:
 
 public slots: // the two are used internally by class, and also called by DiscoDlg::Private::refresh()
     void updateInfo();
-    void updateItems(bool parentAutoItems = false);
+    void updateItems(bool parentAutoItems = false, bool more = false);
     QString getErrorInfo() const;
 
 private slots:
@@ -207,6 +269,8 @@ private:
     bool autoItems; // used in updateItemsFinished
     bool autoInfo;
     QString errorInfo;
+    DiscoExtraItem *moreItem;
+    SubsetsClientManager subsets;
 
     void copyItem(const DiscoItem &);
     void updateInfo(const DiscoItem &);
@@ -222,11 +286,12 @@ private:
 
     bool autoItemsEnabled() const;
     bool autoInfoEnabled() const;
+    int  itemsPerPage() const;
     DiscoDlg *dlg() const;
 };
 
 DiscoListItem::DiscoListItem(DiscoItem it, DiscoData *_d, QTreeWidget *parent)
-: QTreeWidgetItem (parent)
+: DiscoBaseItem (parent)
 {
     isRoot = true;
 
@@ -234,7 +299,7 @@ DiscoListItem::DiscoListItem(DiscoItem i
 }
 
 DiscoListItem::DiscoListItem(DiscoItem it, DiscoData *_d, QTreeWidgetItem *parent)
-: QTreeWidgetItem (parent)
+: DiscoBaseItem (parent)
 {
     isRoot = false;
 
@@ -243,6 +308,7 @@ DiscoListItem::DiscoListItem(DiscoItem i
 
 DiscoListItem::~DiscoListItem()
 {
+    delete moreItem;
 }
 
 void DiscoListItem::init(DiscoItem _item, DiscoData *_d)
@@ -262,6 +328,7 @@ void DiscoListItem::init(DiscoItem _item
         if ( !isRoot )
             autoInfo = true;
     }
+    moreItem = nullptr;
 }
 
 void DiscoListItem::copyItem(const DiscoItem &it)
@@ -359,6 +426,11 @@ bool DiscoListItem::autoInfoEnabled() co
     return dlg()->ck_autoInfo->isChecked();
 }
 
+int DiscoListItem::itemsPerPage() const
+{
+    return dlg()->itemsPerPage();
+}
+
 void DiscoListItem::setExpanded (bool expand)
 {
     if ( expand ) {
@@ -377,7 +449,7 @@ void DiscoListItem::itemSelected()
         updateInfo();
 }
 
-void DiscoListItem::updateItems(bool parentAutoItems)
+void DiscoListItem::updateItems(bool parentAutoItems, bool more)
 {
     if ( parentAutoItems ) {
         // save traffic
@@ -402,6 +474,15 @@ void DiscoListItem::updateItems(bool par
 
     JT_DiscoItems *jt = new JT_DiscoItems(d->pa->client()->rootTask());
     connect(jt, SIGNAL(finished()), SLOT(discoItemsFinished()));
+    int max = itemsPerPage();
+    if (max != 0) {
+        subsets.setMax(max);
+        if (!more)
+            subsets.getFirst();
+        else
+            subsets.getNext();
+        jt->includeSubsetQuery(subsets);
+    }
     jt->get(di.jid(), di.node());
     jt->go(true);
     d->tasks->append(jt);
@@ -412,6 +493,7 @@ void DiscoListItem::discoItemsFinished()
     JT_DiscoItems *jt = static_cast<JT_DiscoItems *>(sender());
 
     if ( jt->success() ) {
+        jt->extractSubsetInfo(subsets);
         updateItemsFinished(jt->items());
     }
     else if ( !autoItems ) {
@@ -441,10 +523,13 @@ void DiscoListItem::updateItemsFinished(
     treeWidget()->setUpdatesEnabled(false);
 
     QHash<QString, DiscoListItem*> children;
-    DiscoListItem *child = (DiscoListItem *)QTreeWidgetItem::child(0);
+    DiscoBaseItem *child = (DiscoBaseItem *)QTreeWidgetItem::child(0);
+    DiscoListItem *item;
     for ( int i = 1; child; ++i ) {
-        children.insert( child->hash(), child );
-
+        if (!moreItem && child->type() != MoreItemsType) {
+            item = (DiscoListItem *)child;
+            children.insert(item->hash(), item);
+        }
         child = (DiscoListItem *)QTreeWidgetItem::child(i);
     }
 
@@ -453,10 +538,10 @@ void DiscoListItem::updateItemsFinished(
         const DiscoItem a = *it;
 
         QString key = computeHash(a.jid().full(), a.node());
-        child = children[ key ];
+        item = children[ key ];
 
-        if ( child ) {
-            child->copyItem ( a );
+        if ( item ) {
+            item->copyItem ( a );
             children.remove( key );
         }
         else {
@@ -468,10 +553,20 @@ void DiscoListItem::updateItemsFinished(
     qDeleteAll(children);
     children.clear();
 
+    // create moreItem if it needs
+    if (subsets.isValid() && !subsets.isLast()) {
+        if (!moreItem && childCount() != 0)
+            moreItem = new DiscoExtraItem(this, tr("more items", "Getting more disco items in order page by page"));
+    }
+    else if (moreItem) {
+        delete moreItem;
+        moreItem = nullptr;
+    }
+
     if ( autoItems && isExpanded() )
         autoItemsChildren();
 
-    if (list.isEmpty()) {
+    if (childCount() == 0) {
         hideChildIndicator();
     }
 
@@ -559,6 +654,34 @@ void DiscoListItem::updateInfo(const Dis
 }
 
 //----------------------------------------------------------------------------
+// DiscoExtraItem implementation
+//----------------------------------------------------------------------------
+
+DiscoExtraItem::DiscoExtraItem(DiscoListItem *parent, const QString &text)
+    :DiscoBaseItem(parent, MoreItemsType)
+{
+    _parent = parent;
+    init(text);
+}
+
+void DiscoExtraItem::itemClicked()
+{
+    _parent->updateItems(false, true);
+}
+
+void DiscoExtraItem::init(const QString &text)
+{
+    Qt::ItemFlags l = flags() & ~Qt::ItemIsSelectable;
+    l |= Qt::ItemNeverHasChildren;
+    setFlags(l);
+    setText(0, text);
+    QFont f = font(0);
+    f.setItalic(true);
+    setFont(0, f);
+}
+
+
+//----------------------------------------------------------------------------
 // DiscoList
 //----------------------------------------------------------------------------
 
@@ -615,10 +738,12 @@ void DiscoListView::resizeEvent(QResizeE
  */
 bool DiscoListView::maybeTip(const QPoint &pos)
 {
-    DiscoListItem* i = (DiscoListItem*)itemAt(viewport()->mapFromGlobal(pos));
-    if(!i)
+    QTreeWidgetItem *twi = itemAt(viewport()->mapFromGlobal(pos));
+    if (!twi || twi->type() == MoreItemsType)
         return false;
 
+    DiscoListItem* i = (DiscoListItem*)twi;
+
     // NAME <JID> (Node "NODE")
     //
     // Identities:
@@ -775,6 +900,8 @@ public: // data
 
     BusyWidget *busy;
 
+    int itemsPerPage;
+
 public: // functions
     Private(DiscoDlg *parent, PsiAccount *pa);
     ~Private();
@@ -800,6 +927,7 @@ public slots:
 
     void itemSelected (QTreeWidgetItem *);
     void itemExpanded (QTreeWidgetItem *);
+    void itemClicked(QTreeWidgetItem *);
     void itemDoubleclicked (QTreeWidgetItem *);
     bool eventFilter (QObject *, QEvent *);
 
@@ -834,6 +962,7 @@ DiscoDlg::Private::Private(DiscoDlg *par
     dlg->le_filter->installEventFilter(this);
     connect(dlg->lv_disco, SIGNAL(currentItemChanged (QTreeWidgetItem *, QTreeWidgetItem *)), SLOT(itemSelected (QTreeWidgetItem *)));
     connect(dlg->lv_disco, SIGNAL(itemExpanded (QTreeWidgetItem *)), SLOT(itemExpanded (QTreeWidgetItem *)));
+    connect(dlg->lv_disco, SIGNAL(itemClicked(QTreeWidgetItem*,int)), SLOT(itemClicked(QTreeWidgetItem*)));
     connect(dlg->lv_disco, SIGNAL(itemDoubleClicked (QTreeWidgetItem *, int)), SLOT(itemDoubleclicked (QTreeWidgetItem *)));
     connect(dlg->le_filter, SIGNAL(textChanged(QString)), dlg->lv_disco, SLOT(updateItemsVisibility(QString)));
 
@@ -1074,7 +1203,7 @@ void DiscoDlg::Private::enableButtons(co
 
 void DiscoDlg::Private::itemSelected (QTreeWidgetItem *item)
 {
-    DiscoListItem *it = static_cast<DiscoListItem *>(item);
+    DiscoBaseItem *it = static_cast<DiscoBaseItem *>(item);
     if ( !it ) {
         disableButtons();
         return;
@@ -1093,12 +1222,19 @@ void DiscoDlg::Private::itemExpanded (QT
         it->setExpanded(true);
 }
 
+void DiscoDlg::Private::itemClicked(QTreeWidgetItem *item)
+{
+    DiscoBaseItem *it = static_cast<DiscoBaseItem *>(item);
+    if (it)
+        it->itemClicked();
+}
+
 void DiscoDlg::Private::itemDoubleclicked (QTreeWidgetItem *item)
 {
-    DiscoListItem *it = static_cast<DiscoListItem *>(item);
-    if ( !it )
+    if (!item || item->type() == MoreItemsType)
         return;
 
+    DiscoListItem *it = (DiscoListItem *)item;
     const DiscoItem d = it->item();
     const Features &f = d.features();
 
@@ -1144,9 +1280,10 @@ bool DiscoDlg::Private::eventFilter (QOb
         if ( event->type() == QEvent::ContextMenu ) {
             QContextMenuEvent *e = static_cast<QContextMenuEvent *>(event);
 
-            DiscoListItem *it = (DiscoListItem *)dlg->lv_disco->currentItem();
-            if ( !it )
+            QTreeWidgetItem *twi = dlg->lv_disco->currentItem();
+            if (!twi || twi->type() == MoreItemsType)
                 return true;
+            DiscoListItem *it = (DiscoListItem *)twi;
 
             // prepare features list
             QList<long> idFeatures;
@@ -1269,6 +1406,7 @@ DiscoDlg::DiscoDlg(PsiAccount *pa, const
     d->jid  = jid;
     d->node = node;
     d->data.pa->dialogRegister(this);
+    d->itemsPerPage = PsiOptions::instance()->getOption("options.ui.service-discovery.items-per-page").toInt();
 
     //setWindowTitle(CAP(caption()));
     setWindowIcon(PsiIconset::instance()->transportStatus("transport", STATUS_ONLINE).icon());
@@ -1310,6 +1448,15 @@ void DiscoDlg::doDisco(QString host, QSt
     d->doDisco(host, node);
 }
 
+int DiscoDlg::itemsPerPage() const
+{
+    if (d->itemsPerPage <= 0)
+        return 0;
+    if (d->itemsPerPage < 10)
+        return 10;
+    return d->itemsPerPage;
+}
+
 PsiAccount *DiscoDlg::account()
 {
     return d->data.pa;
--- git.orig/src/discodlg.h
+++ git/src/discodlg.h
@@ -38,6 +38,7 @@ public:
     ~DiscoDlg();
 
     void doDisco(QString host = QString(), QString node = QString());
+    int  itemsPerPage() const;
     PsiAccount *account();
 
 signals:
