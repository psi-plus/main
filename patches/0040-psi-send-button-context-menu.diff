--- git.orig/options/default.xml
+++ git/options/default.xml
@@ -124,6 +124,7 @@
                 <show-status-changes type="bool">true</show-status-changes>
                 <show-previews type="bool">true</show-previews>
                 <warn-before-clear type="bool">true</warn-before-clear>
+                <only-paste-template type="bool">false</only-paste-template>
                 <css type="QString" />
                 <hide-when-closing type="bool">false</hide-when-closing>
                 <status-with-priority comment="Show priority with status change" type="bool">false</status-with-priority>
--- git.orig/src/chatdlg.ui
+++ git/src/chatdlg.ui
@@ -350,6 +350,9 @@
            <property name="toolTip">
             <string>Send</string>
            </property>
+           <property name="contextMenuPolicy" >
+            <enum>Qt::CustomContextMenu</enum>
+           </property>
           </widget>
          </item>
          <item>
--- git.orig/src/groupchatdlg.cpp
+++ git/src/groupchatdlg.cpp
@@ -228,7 +228,7 @@ public:
     QMap<LanguageManager::LangId, QString> subjectMap;
     bool nonAnonymous;         // got status code 100 ?
     ActionList *actions;
-    IconAction *act_bookmark;
+    IconAction *act_bookmark, *act_pastesend;
     TypeAheadFindBar *typeahead;
 //#ifdef WHITEBOARDING
 //    IconAction *act_whiteboard;
@@ -841,6 +841,13 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
 
     d->state = Private::Connected;
 
+    SendButtonTemplatesMenu* menu = getTemplateMenu();
+    if (menu) {
+        connect(menu, SIGNAL(doPasteAndSend()), this, SLOT(doPasteAndSend()));
+        connect(menu, SIGNAL(doEditTemplates()), this, SLOT(editTemplates()));
+        connect(menu, SIGNAL(doTemplateText(const QString &)), this, SLOT(sendTemp(const QString &)));
+    }
+
     setAcceptDrops(true);
 
     ui_.setupUi(this);
@@ -921,6 +928,9 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
                 });
             });
         }
+        else if (name == QLatin1String("gchat_templates")) {
+            action->setMenu(getTemplateMenu());
+        }
     }
 
     actList = account()->psi()->actionList()->actionLists(PsiActionList::Actions_Common).at(0);
@@ -962,6 +972,9 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
     connect(bm, SIGNAL(conferencesChanged(QList<ConferenceBookmark>)), SLOT(updateMucName()));
     connect(bm, SIGNAL(bookmarksSaved()), SLOT(updateBookmarkIcon()));
 
+    d->act_pastesend = new IconAction(tr("Paste and Send"), "psi/action_paste_and_send", tr("Paste and Send"), 0, this);
+    connect(d->act_pastesend, SIGNAL(triggered()), SLOT(doPasteAndSend()));
+
     int s = PsiIconset::instance()->system().iconSize();
     ui_.toolbar->setIconSize(QSize(s,s));
 
@@ -977,6 +990,7 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
     connect(d->act_send,SIGNAL(triggered()), SLOT(mle_returnPressed()));
      ui_.pb_send->setIcon(IconsetFactory::icon("psi/action_button_send").icon());
     connect(ui_.pb_send, SIGNAL(clicked()), SLOT(mle_returnPressed()));
+    connect(ui_.pb_send, SIGNAL(customContextMenuRequested(const QPoint)), SLOT(sendButtonMenu()));
     d->act_close = new QAction(this);
     addAction(d->act_close);
     connect(d->act_close,SIGNAL(triggered()), SLOT(close()));
@@ -1071,6 +1085,13 @@ GCMainDlg::~GCMainDlg()
     account()->dialogUnregister(this);
     delete d->mucManager;
     delete d;
+
+    SendButtonTemplatesMenu* menu = getTemplateMenu();
+    if (menu) {
+        disconnect(menu, SIGNAL(doPasteAndSend()), this, SLOT(doPasteAndSend()));
+        disconnect(menu, SIGNAL(doEditTemplates()), this, SLOT(editTemplates()));
+        disconnect(menu, SIGNAL(doTemplateText(const QString &)), this, SLOT(sendTemp(const QString &)));
+    }
 }
 
 void GCMainDlg::horizSplitterMoved()
@@ -2441,6 +2462,8 @@ void GCMainDlg::buildMenu()
     d->pm_settings->addSeparator();
 
     d->pm_settings->addAction(d->actions->action("gchat_icon"));
+    d->pm_settings->addAction(d->actions->action("gchat_templates"));
+    d->pm_settings->addAction(d->act_pastesend);
     d->pm_settings->addAction(d->act_nick);
     d->pm_settings->addAction(d->act_bookmark);
 #ifdef PSI_PLUGINS
@@ -2525,4 +2548,48 @@ QStringList GCMainDlg::mucRosterContent(
     return d->usersModel->nickList();
 }
 
+void GCMainDlg::sendButtonMenu()
+{
+    SendButtonTemplatesMenu* menu = getTemplateMenu();
+    if (menu) {
+        menu->setParams(true);
+        menu->exec(QCursor::pos());
+        menu->setParams(false);
+        d->mle()->setFocus();
+    }
+}
+
+void GCMainDlg::editTemplates()
+{
+    if(TabbableWidget::isActiveTab()) {
+        showTemplateEditor();
+    }
+}
+
+void GCMainDlg::doPasteAndSend()
+{
+    if(TabbableWidget::isActiveTab()) {
+        d->mle()->paste();
+        mle_returnPressed();
+        d->act_pastesend->setEnabled(false);
+        QTimer::singleShot(2000, this, SLOT(psButtonEnabled()));
+    }
+}
+
+void GCMainDlg::psButtonEnabled()
+{
+    d->act_pastesend->setEnabled(true);
+}
+
+void GCMainDlg::sendTemp(const QString &templText)
+{
+    if(TabbableWidget::isActiveTab()) {
+        if (!templText.isEmpty()) {
+            d->mle()->textCursor().insertText(templText);
+            if (!PsiOptions::instance()->getOption("options.ui.chat.only-paste-template").toBool())
+                mle_returnPressed();
+        }
+    }
+}
+
 #include "groupchatdlg.moc"
--- git.orig/src/groupchatdlg.h
+++ git/src/groupchatdlg.h
@@ -136,6 +136,11 @@ private slots:
     void openWhiteboard();
 #endif
     void chatEditCreated();
+    void sendButtonMenu();
+    void editTemplates();
+    void doPasteAndSend();
+    void sendTemp(const QString &);
+    void psButtonEnabled();
     void horizSplitterMoved();
     void avatarUpdated(const Jid& jid);
     void doContactContextMenu(const QString &nick);
--- git.orig/src/groupchatdlg.ui
+++ git/src/groupchatdlg.ui
@@ -285,6 +285,9 @@
            <property name="toolTip">
             <string>Send</string>
            </property>
+           <property name="contextMenuPolicy" >
+            <enum>Qt::CustomContextMenu</enum>
+           </property>
           </widget>
          </item>
          <item>
--- git.orig/src/psiactionlist.cpp
+++ git/src/psiactionlist.cpp
@@ -454,6 +454,7 @@ void PsiActionList::Private::createChat(
         IconAction *actCompact = new IconAction(tr("Toggle Compact/Full Size"), "psi/compact", tr("Toggle Compact/Full Size"), 0, this);
         IconAction *actActiveContacts = new IconAction (tr("Active contacts"), "psi/jabber", tr("Active contacts"), 0, this);
         IconAction *actShareFiles = new IconAction (tr("Share Files"), "psi/filemanager", tr("Share Files"), 0, this);
+        IconAction *actTemplates = new IconAction(tr("Templates"), "psi/action_templates", tr("Templates"), 0, this);
 
         ActionNames actions[] = {
             { "chat_clear",  actClear  },
@@ -469,6 +470,7 @@ void PsiActionList::Private::createChat(
             { "chat_compact", actCompact   },
             { "chat_active_contacts", actActiveContacts   },
             { "chat_share_files", actShareFiles  },
+            { "chat_templates", actTemplates },
             { "", nullptr }
         };
 
@@ -487,6 +489,7 @@ void PsiActionList::Private::createGroup
         IconAction *actConfigure = new IconAction(tr("Configure Room"), "psi/configure-room", tr("Configure Room"), 0, this);
         IconAction *actIcon = new IconAction(tr("Select Icon"), "psi/smile", tr("Select Icon"), 0, this);
         IconAction *actShareFiles = new IconAction (tr("Share Files"), "psi/filemanager", tr("Share Files"), 0, this);
+        IconAction *actTemplates = new IconAction(tr("Templates"), "psi/action_templates", tr("Templates"), 0, this);
 
         ActionNames actions[] = {
             { "gchat_clear",  actClear  },
@@ -495,6 +498,7 @@ void PsiActionList::Private::createGroup
             { "gchat_configure", actConfigure   },
             { "gchat_icon", actIcon   },
             { "gchat_share_files", actShareFiles   },
+            { "gchat_templates", actTemplates },
             { "", nullptr }
         };
 
--- git.orig/src/psichatdlg.cpp
+++ git/src/psichatdlg.cpp
@@ -184,10 +184,22 @@ PsiChatDlg::PsiChatDlg(const Jid& jid, P
     connect(account(), SIGNAL(removedContact(PsiContact*)), SLOT(updateContactAdding(PsiContact*)));
     connect(account(), SIGNAL(updateContact(const Jid &)), SLOT(updateContactAdding(const Jid &)));
     mCmdManager_.registerProvider(new ChatDlgMCmdProvider(this));
+    SendButtonTemplatesMenu* menu = getTemplateMenu();
+    if (menu) {
+        connect(menu, SIGNAL(doPasteAndSend()), this, SLOT(doPasteAndSend()));
+        connect(menu, SIGNAL(doEditTemplates()), this, SLOT(editTemplates()));
+        connect(menu, SIGNAL(doTemplateText(const QString &)), this, SLOT(sendTemp(const QString &)));
+    }
 }
 
 PsiChatDlg::~PsiChatDlg()
 {
+    SendButtonTemplatesMenu* menu = getTemplateMenu();
+    if (menu) {
+        disconnect(menu, SIGNAL(doPasteAndSend()), this, SLOT(doPasteAndSend()));
+        disconnect(menu, SIGNAL(doEditTemplates()), this, SLOT(editTemplates()));
+        disconnect(menu, SIGNAL(doTemplateText(const QString &)), this, SLOT(sendTemp(const QString &)));
+    }
     delete actions_;
 }
 
@@ -265,6 +277,7 @@ void PsiChatDlg::initUi()
     smallChat_ = PsiOptions::instance()->getOption("options.ui.chat.use-small-chats").toBool();
      ui_.pb_send->setIcon(IconsetFactory::icon("psi/action_button_send").icon());
     connect(ui_.pb_send, SIGNAL(clicked()), this, SLOT(doSend()));
+    connect(ui_.pb_send, SIGNAL(customContextMenuRequested(const QPoint)), SLOT(sendButtonMenu()));
 
     act_mini_cmd_ = new QAction(this);
     act_mini_cmd_->setText(tr("Input command..."));
@@ -273,6 +286,9 @@ void PsiChatDlg::initUi()
 
     connect(ui_.log->textWidget(), SIGNAL(quote(const QString &)), ui_.mle->chatEdit(), SLOT(insertAsQuote(const QString &)));
 
+    act_pastesend_ = new IconAction(tr("Paste and Send"), "psi/action_paste_and_send", tr("Paste and Send"), 0, this);
+    connect(act_pastesend_, SIGNAL(triggered()), SLOT(doPasteAndSend()));
+
     ui_.log->realTextWidget()->installEventFilter(this);
     ui_.mini_prompt->hide();
 
@@ -427,7 +443,7 @@ void PsiChatDlg::updateToolbuttons()
         IconAction *action = actions_->action(actionName);
         if (action) {
             action->addTo(ui_.toolbar);
-            if (actionName == "chat_icon") {
+            if (actionName == QLatin1String("chat_icon") || actionName == QLatin1String("chat_templates")) {
                 ((QToolButton *)ui_.toolbar->widgetForAction(action))->setPopupMode(QToolButton::InstantPopup);
             }
         }
@@ -511,6 +527,9 @@ void PsiChatDlg::initToolButtons()
                 });
             });
         }
+        else if (name == "chat_templates") {
+            action->setMenu(getTemplateMenu());
+        }
     }
 
     list = account()->psi()->actionList()->actionLists(PsiActionList::Actions_Common).at(0);
@@ -862,6 +881,8 @@ void PsiChatDlg::buildMenu()
     pm_settings_->addSeparator();
 
     pm_settings_->addAction(actions_->action("chat_icon"));
+    pm_settings_->addAction(actions_->action("chat_templates"));
+    pm_settings_->addAction(act_pastesend_);
     pm_settings_->addAction(actions_->action("chat_file"));
     if (AvCallManager::isSupported()) {
         pm_settings_->addAction(actions_->action("chat_voice"));
@@ -932,6 +953,49 @@ void PsiChatDlg::chatEditCreated()
     });
 }
 
+void PsiChatDlg::sendButtonMenu()
+{
+    SendButtonTemplatesMenu* menu = getTemplateMenu();
+    if (menu) {
+        menu->setParams(true);
+        menu->exec(QCursor::pos());
+        menu->setParams(false);
+        chatEdit()->setFocus();
+    }
+}
+
+void PsiChatDlg::editTemplates()
+{
+    if(ChatDlg::isActiveTab()) {
+        showTemplateEditor();
+    }
+}
+
+void PsiChatDlg::doPasteAndSend()
+{
+    if(ChatDlg::isActiveTab()) {
+        chatEdit()->paste();
+        doSend();
+        act_pastesend_->setEnabled(false);
+        QTimer::singleShot(2000, this, SLOT(psButtonEnabled()));
+    }
+}
+
+void PsiChatDlg::psButtonEnabled()
+{
+    act_pastesend_->setEnabled(true);
+}
+
+void PsiChatDlg::sendTemp(const QString &templText)
+{
+    if(ChatDlg::isActiveTab()) {
+        if (!templText.isEmpty()) {
+            chatEdit()->textCursor().insertText(templText);
+            if (!PsiOptions::instance()->getOption("options.ui.chat.only-paste-template").toBool())
+                doSend();
+        }
+    }
+}
 
 void PsiChatDlg::doSend() {
     tabCompletion.reset();
--- git.orig/src/psichatdlg.h
+++ git/src/psichatdlg.h
@@ -50,6 +50,11 @@ private slots:
     void copyUserJid();
     void actActiveContacts();
     void actPgpToggled(bool);
+    void sendButtonMenu();
+    void editTemplates();
+    void doPasteAndSend();
+    void sendTemp(const QString &);
+    void psButtonEnabled();
 
     // reimplemented
     void chatEditCreated();
@@ -90,6 +95,7 @@ private:
     ActionLineEdit *le_autojid;
     IconAction *act_autojid;
     IconAction *act_active_contacts;
+    IconAction* act_pastesend_;
 
     MCmdManager mCmdManager_;
     MCmdSimpleSite mCmdSite_;
--- git.orig/src/psioptions.cpp
+++ git/src/psioptions.cpp
@@ -198,12 +198,13 @@ bool PsiOptions::newProfile()
         chatToolbar.keys += pluginsKeys;
         chatToolbar.keys << "spacer" << "chat_icon" << "chat_file"
                          << "chat_pgp" << "chat_info" << "chat_history" << "chat_voice"
-                         << "chat_active_contacts";
+                         << "chat_active_contacts" << "gchat_templates";
 
         ToolbarPrefs groupchatToolbar;
         groupchatToolbar.on = true;
         groupchatToolbar.name = "Groupchat";
-        groupchatToolbar.keys << "gchat_clear"  << "gchat_find" << "gchat_html_text" << "gchat_configure";
+        groupchatToolbar.keys << "gchat_clear"  << "gchat_find" << "gchat_html_text" <<
+                                 "gchat_configure" << "gchat_templates";
         groupchatToolbar.keys += pluginsKeys;
         groupchatToolbar.keys << "spacer" << "gchat_icon" ;
 
--- git.orig/src/psi_profiles.cpp
+++ git/src/psi_profiles.cpp
@@ -529,7 +529,7 @@ void OptionsMigration::lateMigration()
         chatToolbar.keys += pluginsKeys;
         chatToolbar.keys << "spacer" << "chat_icon" << "chat_file"
                          << "chat_pgp" << "chat_info" << "chat_history" << "chat_voice"
-                         << "chat_active_contacts";
+                         << "chat_active_contacts" << "chat_templates";
 
         if (PsiOptions::instance()->getOption("options.ui.chat.disable-paste-send").toBool()) {
             chatToolbar.keys.removeAt(chatToolbar.keys.indexOf("chat_ps"));
@@ -539,7 +539,8 @@ void OptionsMigration::lateMigration()
         groupchatToolbar.on = chatToolbar.on;
 
         groupchatToolbar.name = "Groupchat";
-        groupchatToolbar.keys << "gchat_clear"  << "gchat_find" << "gchat_html_text" << "gchat_configure" << "gchat_share_files";
+        groupchatToolbar.keys << "gchat_clear"  << "gchat_find" << "gchat_html_text" <<
+                                 "gchat_configure" << "gchat_share_files" << "gchat_templates";
         groupchatToolbar.keys += pluginsKeys;
         groupchatToolbar.keys << "spacer" << "gchat_icon" ;
 
--- git.orig/src/sendbuttonmenu.cpp
+++ git/src/sendbuttonmenu.cpp
@@ -0,0 +1,495 @@
+#include <QInputDialog>
+#include <QMessageBox>
+
+#include "sendbuttonmenu.h"
+#include "psioptions.h"
+#include "psiiconset.h"
+#include "common.h"
+
+SendButtonTemplatesEditor::SendButtonTemplatesEditor(QWidget* parent)
+    : QDialog(parent)
+{
+    ui_.setupUi(this);
+    setAttribute(Qt::WA_DeleteOnClose);
+    // Create actions
+    QAction *addRootTemplAction = new QAction(tr("Add template string"), this);
+    connect(addRootTemplAction, SIGNAL(triggered()), this, SLOT(addRootTemplate()));
+    addChildTemplAction = new QAction(tr("Add template string as submenu"), this);
+    connect(addChildTemplAction, SIGNAL(triggered()), this, SLOT(addChildTemplate()));
+    QAction *addRootSeparatorAction = new QAction(tr("Add separator"), this);
+    connect(addRootSeparatorAction, SIGNAL(triggered()), this, SLOT(addRootSeparator()));
+    addChildSeparatorAction = new QAction(tr("Add separator as submenu"), this);
+    connect(addChildSeparatorAction, SIGNAL(triggered()), this, SLOT(addChildSeparator()));
+    editAction = new QAction(IconsetFactory::icon("psi/action_templates_edit").icon(), tr("Edit"), this);
+    removeAction = new QAction(IconsetFactory::icon("psi/remove").icon(), tr("Remove"), this);
+    upAction = new QAction(IconsetFactory::icon("psi/arrowUp").icon(), tr("Up"), this);
+    downAction = new QAction(IconsetFactory::icon("psi/arrowDown").icon(), tr("Down"), this);
+    // Create Add button menu
+    QMenu *add_menu = new QMenu(this);
+    add_menu->addAction(addRootTemplAction);
+    add_menu->addAction(addChildTemplAction);
+    add_menu->addAction(addRootSeparatorAction);
+    add_menu->addAction(addChildSeparatorAction);
+    ui_.btnAdd->setMenu(add_menu);
+    //--
+    QStringList templ_list = PsiOptions::instance()->getOption("options.ui.chat.templates", QStringList()).toStringList();
+    int templ_cnt = templ_list.size();
+    QHash<QString, QTreeWidgetItem *> subitems;
+    for (int i = 0; i < templ_cnt; i++) {
+        QStringList menu_list = SendButtonTemplatesMenu::getMenuItems(templ_list.at(i));
+        if (menu_list.size() == 0)
+            continue;
+        // find subitems if exists
+        QTreeWidgetItem *item = NULL;
+        QString menu_str = "";
+        int j = menu_list.size() - 2;
+        for (; j >= 0; j--) {
+            menu_str = "";
+            QString menu_str2 = "";
+            for (int k = 0; k <= j; k++) {
+                menu_str = menu_str2;
+                menu_str2.append("/" + menu_list.at(k));
+            }
+            item = subitems.value(menu_str2, NULL);
+            if (item) {
+                menu_str = menu_str2;
+                ++j;
+                break;
+            }
+        }
+        if (j < 0)
+            j = 0;
+        // create subitems
+        int sub_cnt = menu_list.size();
+        for (; j < sub_cnt; j++) {
+            QString str1 = menu_list.at(j);
+            QTreeWidgetItem::ItemType type = QTreeWidgetItem::Type;
+            if (j == (sub_cnt - 1) && str1 == "\\-") {
+                str1 = tr("<separator>");
+                type = QTreeWidgetItem::UserType;
+            }
+            if (j == 0) {
+                // toplevel item
+                item = new QTreeWidgetItem(ui_.lstTemplates, type);
+            } else {
+                item = new QTreeWidgetItem(item, type);
+            }
+            if (type == QTreeWidgetItem::UserType) {
+                item->setFlags(item->flags() & ~Qt::ItemIsDropEnabled);
+            }
+            item->setText(0, SendButtonTemplatesMenu::stripSlashes(str1));
+            if (j < (sub_cnt - 1)) {
+                menu_str.append("/" + str1);
+                subitems[menu_str] = item;
+            }
+        }
+    }
+}
+
+void SendButtonTemplatesEditor::addRootTemplate()
+{
+    QString t = ui_.txtTemplate->text();
+    if (t.isEmpty())
+        return;
+    QTreeWidgetItem *item = new QTreeWidgetItem(ui_.lstTemplates, QStringList(t), QTreeWidgetItem::Type);
+    ui_.lstTemplates->addTopLevelItem(item);
+    ui_.txtTemplate->setText("");
+}
+
+void SendButtonTemplatesEditor::addChildTemplate()
+{
+    QString t = ui_.txtTemplate->text();
+    if (t.isEmpty())
+        return;
+    QTreeWidgetItem *curr_item = ui_.lstTemplates->currentItem();
+    if (curr_item && curr_item->type() == QTreeWidgetItem::Type) {
+        curr_item->addChild(new QTreeWidgetItem(QStringList(t), QTreeWidgetItem::Type));
+        ui_.txtTemplate->setText("");
+    }
+}
+
+void SendButtonTemplatesEditor::addRootSeparator()
+{
+    QTreeWidgetItem *item = new QTreeWidgetItem(ui_.lstTemplates, QStringList(tr("<separator>")), QTreeWidgetItem::UserType);
+    item->setFlags(item->flags() & ~Qt::ItemIsDropEnabled);
+    ui_.lstTemplates->addTopLevelItem(item);
+}
+
+void SendButtonTemplatesEditor::addChildSeparator()
+{
+    QTreeWidgetItem *curr_item = ui_.lstTemplates->currentItem();
+    if (curr_item && curr_item->type() == QTreeWidgetItem::Type) {
+        QTreeWidgetItem *item = new QTreeWidgetItem(QStringList(tr("<separator>")), QTreeWidgetItem::UserType);
+        item->setFlags(item->flags() & ~Qt::ItemIsDropEnabled);
+        curr_item->addChild(item);
+    }
+}
+
+void SendButtonTemplatesEditor::removeTemplate()
+{
+    QTreeWidgetItem *item = ui_.lstTemplates->currentItem();
+    if (item) {
+        delete item;
+    }
+}
+
+void SendButtonTemplatesEditor::editTemplate()
+{
+    QTreeWidgetItem *item = ui_.lstTemplates->currentItem();
+    if (item && item->type() == QTreeWidgetItem::Type) {
+        QString templ_str = item->text(0);
+        QInputDialog *editBox = new QInputDialog(this, Qt::Dialog);
+        editBox->setWindowTitle(tr("Edit template"));
+        editBox->setLabelText(tr("Input new template text"));
+        editBox->setTextEchoMode(QLineEdit::Normal);
+        editBox->setTextValue(templ_str);
+        editBox->setWindowModality(Qt::WindowModal);
+        if (editBox->exec() == QInputDialog::Accepted) {
+            QString new_templ_str = editBox->textValue();
+            if (!new_templ_str.isEmpty() && new_templ_str != templ_str) {
+                item->setText(0, new_templ_str);
+            }
+        }
+        delete editBox;
+    }
+}
+
+void SendButtonTemplatesEditor::upTemplate()
+{
+    swapItem(-1);
+}
+
+void SendButtonTemplatesEditor::downTemplate()
+{
+    swapItem(1);
+}
+
+void SendButtonTemplatesEditor::selectionChanged(QTreeWidgetItem *current, QTreeWidgetItem */*previous*/)
+{
+    bool up_e = false;
+    bool dw_e = false;
+    bool ed_e = false;
+    bool dl_e = false;
+    QModelIndex index = ui_.lstTemplates->currentIndex();
+    if (current && index.isValid()) {
+        QTreeWidgetItem *parent = current->parent();
+        int cnt = 0;
+        if (parent) {
+            cnt = parent->childCount();
+        } else {
+            cnt = ui_.lstTemplates->topLevelItemCount();
+        }
+        int row = index.row();
+        if (cnt > 0) {
+            if (row > 0)
+                up_e = true;
+            if (row < cnt - 1)
+                dw_e = true;
+            if (current->type() == QTreeWidgetItem::Type)
+                ed_e = true;
+            dl_e = true;
+        }
+
+    }
+    addChildTemplAction->setEnabled(ed_e);
+    addChildSeparatorAction->setEnabled(ed_e);
+    ui_.btnEdit->setEnabled(ed_e);
+    editAction->setEnabled(ed_e);
+    ui_.btnRemove->setEnabled(dl_e);
+    removeAction->setEnabled(ed_e);
+    ui_.btnUp->setEnabled(up_e);
+    upAction->setEnabled(up_e);
+    ui_.btnDown->setEnabled(dw_e);
+    downAction->setEnabled(dw_e);
+}
+
+void SendButtonTemplatesEditor::contextMenu(QPoint pos)
+{
+    QMenu* menu = new QMenu(this);
+    menu->addAction(editAction);
+    menu->addAction(removeAction);
+    menu->addSeparator();
+    menu->addAction(upAction);
+    menu->addAction(downAction);
+    QAction *result = menu->exec(ui_.lstTemplates->mapToGlobal(pos));
+    if (result == editAction) {
+        editTemplate();
+    } else if (result == removeAction) {
+        removeTemplate();
+    } else if (result == upAction) {
+        upTemplate();
+    } else if (result == downAction) {
+        downTemplate();
+    }
+    delete menu;
+}
+
+void SendButtonTemplatesEditor::swapItem(int updown)
+{
+    QTreeWidgetItem *item = ui_.lstTemplates->currentItem();
+    QModelIndex index = ui_.lstTemplates->currentIndex();
+    if (item && index.isValid()) {
+        int row = index.row();
+        int new_pos = row + updown;
+        QTreeWidgetItem * parent = item->parent();
+        int cnt = 0;
+        if (parent) {
+            cnt = parent->childCount();
+        } else {
+            cnt = ui_.lstTemplates->topLevelItemCount();
+        }
+        if (new_pos >= 0 && new_pos < cnt) {
+            if (parent) {
+                parent->removeChild(item);
+                parent->insertChild(new_pos, item);
+            } else {
+                ui_.lstTemplates->takeTopLevelItem(row);
+                ui_.lstTemplates->insertTopLevelItem(new_pos, item);
+            }
+            ui_.lstTemplates->setCurrentItem(item);
+            selectionChanged(item, item); // needed update buttons
+        }
+    }
+}
+
+QStringList SendButtonTemplatesEditor::genTemplatesList(QTreeWidgetItem* item, QString base_path)
+{
+    QStringList res_lst;
+    QString new_base = base_path;
+    if (!new_base.isEmpty())
+        new_base.append("/");
+    QString item_text = SendButtonTemplatesMenu::addSlashes(item->text(0));
+    int child_cnt = item->childCount();
+    if (child_cnt == 0) {
+        if (item->type() != QTreeWidgetItem::Type)
+            item_text = "\\-"; // Separator
+        res_lst.push_back(new_base + item_text);
+        return res_lst;
+    }
+    new_base.append(item_text);
+    for (int idx = 0; idx < child_cnt; idx++) {
+        res_lst.append(genTemplatesList(item->child(idx), new_base));
+    }
+    return res_lst;
+}
+
+void SendButtonTemplatesEditor::accept()
+{
+    QString t = ui_.txtTemplate->text().trimmed();
+    if (!t.isEmpty()) {
+        QMessageBox *msgBox = new QMessageBox(this);
+        msgBox->setIcon(QMessageBox::Warning);
+        msgBox->setWindowTitle(tr("Save templates"));
+        msgBox->setText(tr("The template \"%1\" hasn't been saved!").arg(t));
+        msgBox->setInformativeText(tr("Continue?"));
+        msgBox->setStandardButtons(QMessageBox::Yes | QMessageBox::No);
+        msgBox->setDefaultButton(QMessageBox::No);
+        msgBox->setWindowModality(Qt::WindowModal);
+        int res = msgBox->exec();
+        delete msgBox;
+        if (res == QMessageBox::No) {
+            return;
+        }
+    }
+    QStringList templates;
+    int top_cnt = ui_.lstTemplates->topLevelItemCount();
+    for (int idx = 0; idx < top_cnt; idx++) {
+        templates.append(genTemplatesList(ui_.lstTemplates->topLevelItem(idx)));
+    }
+    PsiOptions::instance()->setOption("options.ui.chat.templates", templates);
+    QDialog::accept();
+    close();
+}
+
+void SendButtonTemplatesEditor::reject()
+{
+    QDialog::reject();
+    close();
+}
+
+//------------------------------
+
+SendButtonTemplatesMenu::SendButtonTemplatesMenu(QWidget* parent)
+    : QMenu(parent)
+    , mapper(NULL)
+    , ps_(false)
+{
+    setSeparatorsCollapsible(true);
+    update();
+    connect(PsiOptions::instance(), SIGNAL(optionChanged(const QString&)), SLOT(optionChanged(const QString&)));
+}
+
+void SendButtonTemplatesMenu::setParams(bool ps)
+{
+    if (ps_ != ps) {
+        ps_ = ps;
+        updatePsAction();
+    }
+}
+
+void SendButtonTemplatesMenu::updatePsAction()
+{
+    bool ps_v = false;
+    if (ps_ && !PsiOptions::instance()->getOption("options.ui.chat.disable-paste-send").toBool())
+        ps_v = true;
+    pasteSendAct->setVisible(ps_v);
+}
+
+/**
+ * Split menu text string as submenu. Char '/' used as separator.
+ */
+QStringList SendButtonTemplatesMenu::getMenuItems(const QString text)
+{
+    QStringList res_list;
+    int str_len = text.length();
+    unsigned int sl_cnt = 0;
+    int str_pos = 0;
+    for (int i = 0; i < str_len; i++) {
+        QChar ch = text.at(i);
+        if (ch == '\\') {
+            sl_cnt++;
+        } else if (ch == '/') {
+            if ((sl_cnt & 1) == 0) {
+                QString str1 = text.mid(str_pos, i - str_pos).trimmed();
+                if (!str1.isEmpty()) {
+                    res_list.push_back(str1);
+                    str_pos = i + 1;
+                }
+                str_pos = i + 1;
+            }
+            sl_cnt = 0;
+        } else {
+            sl_cnt = 0;
+        }
+    }
+    if (str_pos < str_len) {
+        QString str1 = text.mid(str_pos);
+        if (!str1.isEmpty()) {
+            res_list.push_back(str1);
+        }
+    }
+    return res_list;
+}
+
+QAction *SendButtonTemplatesMenu::makeAction(QString text)
+{
+    QString str1;
+    if (text.length() > 30) {
+        str1 = text.left(30).replace("&", "&&") + "...";
+    } else {
+        str1 = text.replace("&", "&&");
+    }
+    QAction *act = new QAction(str1, this);
+    return act;
+}
+
+void SendButtonTemplatesMenu::update()
+{
+    clearMenu(this);
+    if (mapper)
+        delete mapper;
+    mapper = new QSignalMapper(this);
+
+    pasteSendAct = new QAction(IconsetFactory::icon("psi/action_paste_and_send").icon(), tr("Paste and &Send"), this);
+    connect(pasteSendAct, SIGNAL(triggered()), SIGNAL(doPasteAndSend()));
+    addAction(pasteSendAct);
+    updatePsAction();
+    addSeparator();
+
+    QAction *editTemplatesAct = new QAction(IconsetFactory::icon("psi/action_templates_edit").icon(), tr("&Edit Templates"), this);
+    connect(editTemplatesAct, SIGNAL(triggered()), SIGNAL(doEditTemplates()));
+    addAction(editTemplatesAct);
+
+    onlyPaste = new QAction(tr("Only &Paste"), this);
+    onlyPaste->setCheckable(true);
+    onlyPaste->setChecked(PsiOptions::instance()->getOption("options.ui.chat.only-paste-template").toBool());
+    connect(onlyPaste, SIGNAL(triggered()), SLOT(clickOnlyPaste()));
+    addAction(onlyPaste);
+    addSeparator();
+
+    QStringList templ_list = PsiOptions::instance()->getOption("options.ui.chat.templates", QStringList()).toStringList();
+    int templ_cnt = templ_list.size();
+    QHash<QString, QAction *> submenus;
+    for (int i = 0; i < templ_cnt; i++) {
+        QStringList menu_list = SendButtonTemplatesMenu::getMenuItems(templ_list.at(i));
+        if (menu_list.size() == 0)
+            continue;
+        // find submenus if exists
+        QAction *m_act = NULL;
+        QString menu_str = "";
+        int j = menu_list.size() - 2;
+        for (; j >= 0; j--) {
+            menu_str = "";
+            QString menu_str2 = "";
+            for (int k = 0; k <= j; k++) {
+                menu_str = menu_str2;
+                menu_str2.append("/" + menu_list.at(k));
+            }
+            m_act = submenus.value(menu_str2, NULL);
+            if (m_act) {
+                menu_str = menu_str2;
+                ++j;
+                break;
+            }
+        }
+        if (j < 0)
+            j = 0;
+        // create submenus
+        QMenu *smenu = this;
+        if (m_act) {
+            smenu = m_act->menu();
+            if (!smenu)
+                smenu = new QMenu(this);
+        }
+        int sub_cnt = menu_list.size();
+        for (; ; j++) {
+            QString str1 = menu_list.at(j);
+            if (j == (sub_cnt - 1) && str1 == "\\-") {
+                smenu->addSeparator();
+                break;
+            }
+            QAction *c_act = makeAction(SendButtonTemplatesMenu::stripSlashes(str1));
+            smenu->addAction(c_act);
+            if (j == (sub_cnt - 1)) {
+                connect(c_act, SIGNAL(triggered()), mapper, SLOT(map()));
+                mapper->setMapping(c_act, SendButtonTemplatesMenu::stripSlashes(str1));
+                break;
+            } else {
+                smenu = new QMenu(this);
+                c_act->setMenu(smenu);
+                menu_str.append("/" + str1);
+                submenus[menu_str] = c_act;
+            }
+        }
+    }
+    connect(mapper, SIGNAL(mapped(const QString &)), SIGNAL(doTemplateText(const QString &)));
+}
+
+void SendButtonTemplatesMenu::clickOnlyPaste()
+{
+    if (PsiOptions::instance()->getOption("options.ui.chat.only-paste-template").toBool())
+        PsiOptions::instance()->setOption("options.ui.chat.only-paste-template", false);
+    else
+        PsiOptions::instance()->setOption("options.ui.chat.only-paste-template", true);
+}
+
+void SendButtonTemplatesMenu::optionChanged(const QString& option)
+{
+    if (option == "options.ui.chat.disable-paste-send") {
+        updatePsAction();
+    } else if (option == "options.ui.chat.css") {
+        setStyleSheet(PsiOptions::instance()->getOption("options.ui.chat.css").toString());
+    //} else if (option == "options.ui.chat.only-paste-template") {
+    //    onlyPaste->setChecked(PsiOptions::instance()->getOption("options.ui.chat.only-paste-template").toBool());
+    }
+}
+
+QString SendButtonTemplatesMenu::addSlashes(QString str)
+{
+    return str.replace("\\", "\\\\", Qt::CaseSensitive).replace("/", "\\/");
+}
+
+QString SendButtonTemplatesMenu::stripSlashes(QString str)
+{
+    return str.replace("\\/", "/").replace("\\\\", "\\");
+}
--- git.orig/src/sendbuttonmenu.h
+++ git/src/sendbuttonmenu.h
@@ -0,0 +1,77 @@
+#ifndef SENDBUTTONMENU_H
+#define SENDBUTTONMENU_H
+
+#include <QDialog>
+#include <QMenu>
+#include <QPointer>
+#include <QSignalMapper>
+
+#include "ui_sendbuttontemplateseditor.h"
+
+class SendButtonTemplatesEditor : public QDialog
+{
+    Q_OBJECT
+public:
+    SendButtonTemplatesEditor(QWidget* parent = 0);
+
+private:
+    Ui::SendButtonTemplatesEditor ui_;
+    //QString t;
+    QAction *addChildTemplAction;
+    QAction *addChildSeparatorAction;
+    QAction *editAction;
+    QAction *removeAction;
+    QAction *upAction;
+    QAction *downAction;
+    void swapItem(int);
+    QStringList genTemplatesList(QTreeWidgetItem* item, QString base_path = "");
+
+private slots:
+    void addRootTemplate();
+    void addChildTemplate();
+    void addRootSeparator();
+    void addChildSeparator();
+    void removeTemplate();
+    void editTemplate();
+    void upTemplate();
+    void downTemplate();
+    void selectionChanged(QTreeWidgetItem *current, QTreeWidgetItem *previous);
+    void contextMenu(QPoint);
+
+protected slots:
+    void accept();
+    void reject();
+
+};
+
+class SendButtonTemplatesMenu : public QMenu
+{
+    Q_OBJECT
+public:
+    SendButtonTemplatesMenu(QWidget* parent);
+    void setParams(bool ps);
+    static QStringList getMenuItems(const QString);
+    static QString addSlashes(QString);
+    static QString stripSlashes(QString);
+
+private:
+    QSignalMapper *mapper;
+    bool ps_;
+    QAction *pasteSendAct;
+    QAction *onlyPaste;
+    void updatePsAction();
+    QAction *makeAction(const QString);
+
+private slots:
+    void update();
+    void clickOnlyPaste();
+    void optionChanged(const QString& option);
+
+signals:
+    void doPasteAndSend();
+    void doEditTemplates();
+    void doTemplateText(const QString &);
+
+};
+
+#endif
--- git.orig/src/sendbuttontemplateseditor.ui
+++ git/src/sendbuttontemplateseditor.ui
@@ -0,0 +1,364 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>SendButtonTemplatesEditor</class>
+ <widget class="QDialog" name="SendButtonTemplatesEditor">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>464</width>
+    <height>407</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Template editor</string>
+  </property>
+  <layout class="QVBoxLayout">
+   <item>
+    <widget class="QGroupBox" name="groupBox">
+     <property name="title">
+      <string>Templates</string>
+     </property>
+     <layout class="QVBoxLayout">
+      <item>
+       <widget class="QLineEdit" name="txtTemplate">
+        <property name="text">
+         <string/>
+        </property>
+       </widget>
+      </item>
+      <item>
+       <widget class="Line" name="line1">
+        <property name="orientation">
+         <enum>Qt::Horizontal</enum>
+        </property>
+       </widget>
+      </item>
+      <item>
+       <layout class="QHBoxLayout">
+        <item>
+         <widget class="QTreeWidget" name="lstTemplates">
+          <property name="contextMenuPolicy">
+           <enum>Qt::CustomContextMenu</enum>
+          </property>
+          <property name="dragEnabled">
+           <bool>true</bool>
+          </property>
+          <property name="dragDropMode">
+           <enum>QAbstractItemView::InternalMove</enum>
+          </property>
+          <property name="defaultDropAction">
+           <enum>Qt::MoveAction</enum>
+          </property>
+          <attribute name="headerVisible">
+           <bool>false</bool>
+          </attribute>
+          <attribute name="headerVisible">
+           <bool>false</bool>
+          </attribute>
+          <column>
+           <property name="text">
+            <string notr="true">1</string>
+           </property>
+          </column>
+         </widget>
+        </item>
+        <item>
+         <layout class="QVBoxLayout">
+          <item>
+           <widget class="QToolButton" name="btnUp">
+            <property name="enabled">
+             <bool>false</bool>
+            </property>
+            <property name="sizePolicy">
+             <sizepolicy hsizetype="Fixed" vsizetype="Maximum">
+              <horstretch>0</horstretch>
+              <verstretch>0</verstretch>
+             </sizepolicy>
+            </property>
+            <property name="maximumSize">
+             <size>
+              <width>26</width>
+              <height>51</height>
+             </size>
+            </property>
+            <property name="styleSheet">
+             <string notr="true">margin:0;padding:0;</string>
+            </property>
+            <property name="arrowType">
+             <enum>Qt::UpArrow</enum>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QToolButton" name="btnDown">
+            <property name="enabled">
+             <bool>false</bool>
+            </property>
+            <property name="sizePolicy">
+             <sizepolicy hsizetype="Fixed" vsizetype="Maximum">
+              <horstretch>0</horstretch>
+              <verstretch>0</verstretch>
+             </sizepolicy>
+            </property>
+            <property name="maximumSize">
+             <size>
+              <width>26</width>
+              <height>51</height>
+             </size>
+            </property>
+            <property name="styleSheet">
+             <string notr="true">margin:0;padding:0;</string>
+            </property>
+            <property name="arrowType">
+             <enum>Qt::DownArrow</enum>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </item>
+      <item>
+       <widget class="Line" name="line2">
+        <property name="orientation">
+         <enum>Qt::Horizontal</enum>
+        </property>
+       </widget>
+      </item>
+      <item>
+       <layout class="QHBoxLayout">
+        <property name="spacing">
+         <number>6</number>
+        </property>
+        <property name="margin">
+         <number>0</number>
+        </property>
+        <item>
+         <widget class="QPushButton" name="btnAdd">
+          <property name="text">
+           <string>Add</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QPushButton" name="btnEdit">
+          <property name="enabled">
+           <bool>false</bool>
+          </property>
+          <property name="text">
+           <string>Edit</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QPushButton" name="btnRemove">
+          <property name="enabled">
+           <bool>false</bool>
+          </property>
+          <property name="text">
+           <string>Remove</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </item>
+     </layout>
+    </widget>
+   </item>
+   <item>
+    <layout class="QHBoxLayout">
+     <property name="spacing">
+      <number>6</number>
+     </property>
+     <property name="margin">
+      <number>0</number>
+     </property>
+     <item>
+      <spacer>
+       <property name="orientation">
+        <enum>Qt::Horizontal</enum>
+       </property>
+       <property name="sizeHint" stdset="0">
+        <size>
+         <width>40</width>
+         <height>20</height>
+        </size>
+       </property>
+      </spacer>
+     </item>
+     <item>
+      <widget class="QPushButton" name="btnOk">
+       <property name="text">
+        <string>Ok</string>
+       </property>
+       <property name="autoDefault">
+        <bool>false</bool>
+       </property>
+       <property name="default">
+        <bool>true</bool>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QPushButton" name="btnCancel">
+       <property name="text">
+        <string>Cancel</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </item>
+  </layout>
+ </widget>
+ <tabstops>
+  <tabstop>txtTemplate</tabstop>
+  <tabstop>lstTemplates</tabstop>
+  <tabstop>btnUp</tabstop>
+  <tabstop>btnDown</tabstop>
+  <tabstop>btnAdd</tabstop>
+  <tabstop>btnEdit</tabstop>
+  <tabstop>btnRemove</tabstop>
+  <tabstop>btnOk</tabstop>
+  <tabstop>btnCancel</tabstop>
+ </tabstops>
+ <resources/>
+ <connections>
+  <connection>
+   <sender>btnOk</sender>
+   <signal>clicked()</signal>
+   <receiver>SendButtonTemplatesEditor</receiver>
+   <slot>accept()</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>265</x>
+     <y>271</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>-2</x>
+     <y>287</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>btnCancel</sender>
+   <signal>clicked()</signal>
+   <receiver>SendButtonTemplatesEditor</receiver>
+   <slot>reject()</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>341</x>
+     <y>283</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>81</x>
+     <y>272</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>btnRemove</sender>
+   <signal>clicked()</signal>
+   <receiver>SendButtonTemplatesEditor</receiver>
+   <slot>removeTemplate()</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>290</x>
+     <y>227</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>199</x>
+     <y>149</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>btnEdit</sender>
+   <signal>clicked()</signal>
+   <receiver>SendButtonTemplatesEditor</receiver>
+   <slot>editTemplate()</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>231</x>
+     <y>269</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>231</x>
+     <y>162</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>btnUp</sender>
+   <signal>clicked()</signal>
+   <receiver>SendButtonTemplatesEditor</receiver>
+   <slot>upTemplate()</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>439</x>
+     <y>120</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>231</x>
+     <y>162</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>btnDown</sender>
+   <signal>clicked()</signal>
+   <receiver>SendButtonTemplatesEditor</receiver>
+   <slot>downTemplate()</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>439</x>
+     <y>196</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>231</x>
+     <y>162</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>lstTemplates</sender>
+   <signal>customContextMenuRequested(QPoint)</signal>
+   <receiver>SendButtonTemplatesEditor</receiver>
+   <slot>contextMenu(QPoint)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>219</x>
+     <y>158</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>231</x>
+     <y>162</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>lstTemplates</sender>
+   <signal>currentItemChanged(QTreeWidgetItem*,QTreeWidgetItem*)</signal>
+   <receiver>SendButtonTemplatesEditor</receiver>
+   <slot>selectionChanged(QTreeWidgetItem*,QTreeWidgetItem*)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>219</x>
+     <y>158</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>231</x>
+     <y>162</y>
+    </hint>
+   </hints>
+  </connection>
+ </connections>
+ <slots>
+  <slot>removeTemplate()</slot>
+  <slot>editTemplate()</slot>
+  <slot>upTemplate()</slot>
+  <slot>downTemplate()</slot>
+  <slot>selectionChanged(QTreeWidgetItem*,QTreeWidgetItem*)</slot>
+  <slot>contextMenu(QPoint)</slot>
+ </slots>
+</ui>
--- git.orig/src/src.pri
+++ git/src/src.pri
@@ -228,6 +228,7 @@ HEADERS += \
     $$PWD/vcardphotodlg.h \
     $$PWD/psicli.h \
     $$PWD/coloropt.h \
+    $$PWD/sendbuttonmenu.h \
     $$PWD/geolocationdlg.h \
     $$PWD/rosteravatarframe.h \
     $$PWD/psicapsregsitry.h \
@@ -366,6 +367,7 @@ SOURCES += \
     $$PWD/bookmarkmanagedlg.cpp \
     $$PWD/vcardphotodlg.cpp \
     $$PWD/coloropt.cpp \
+    $$PWD/sendbuttonmenu.cpp \
     $$PWD/geolocationdlg.cpp \
     $$PWD/rosteravatarframe.cpp \
     $$PWD/tabcompletion.cpp \
@@ -585,6 +587,7 @@ FORMS += \
     $$PWD/bookmarkmanage.ui \
     $$PWD/ahcommanddlg.ui \
     $$PWD/ahcformdlg.ui \
+    $$PWD/sendbuttontemplateseditor.ui \
     $$PWD/geolocation.ui \
     $$PWD/rosteravatarframe.ui \
     $$PWD/captchadlg.ui \
--- git.orig/src/tabs/tabbablewidget.cpp
+++ git/src/tabs/tabbablewidget.cpp
@@ -41,6 +41,13 @@ TabbableWidget::TabbableWidget(const Jid
     , pa_(pa)
     , tabManager_(tabManager)
 {
+    if (TabbableWidget::chatsCount == 0) {
+        TabbableWidget::templateMenu = new SendButtonTemplatesMenu(NULL);
+        TabbableWidget::templateMenu->setParams(false);
+        TabbableWidget::templateMenu->setStyleSheet(PsiOptions::instance()->getOption("options.ui.chat.css").toString());
+    }
+    ++TabbableWidget::chatsCount;
+
     stateCommitTimer_.setInterval(100);
     stateCommitTimer_.setSingleShot(true);
     connect(&stateCommitTimer_, &QTimer::timeout, this, [this](){
@@ -115,6 +122,42 @@ TabbableWidget::~TabbableWidget()
     if (isTabbed()) {
         getManagingTabDlg()->removeTabWithNoChecks(this);
     }
+    --TabbableWidget::chatsCount;
+    if (TabbableWidget::chatsCount == 0) {
+        if (TabbableWidget::templateMenu != NULL) {
+            delete TabbableWidget::templateMenu;
+            TabbableWidget::templateMenu = NULL;
+        }
+        if (!TabbableWidget::templateEditDlg.isNull()) {
+            delete (TabbableWidget::templateEditDlg);
+            TabbableWidget::templateEditDlg = NULL;
+        }
+    }
+}
+
+int TabbableWidget::chatsCount = 0;
+SendButtonTemplatesMenu *TabbableWidget::templateMenu = NULL;
+QPointer<SendButtonTemplatesEditor> TabbableWidget::templateEditDlg = NULL;
+
+SendButtonTemplatesMenu* TabbableWidget::getTemplateMenu()
+{
+    return TabbableWidget::templateMenu;
+}
+
+void TabbableWidget::showTemplateEditor()
+{
+    bool new_window = false;
+    if (TabbableWidget::templateEditDlg.isNull()) {
+        new_window = true;
+        TabbableWidget::templateEditDlg = new SendButtonTemplatesEditor(NULL);
+        if (TabbableWidget::templateMenu) {
+            TabbableWidget::templateEditDlg->setStyleSheet(PsiOptions::instance()->getOption("options.ui.chat.css").toString());
+            connect(TabbableWidget::templateEditDlg.data(), SIGNAL(accepted()), TabbableWidget::templateMenu, SLOT(update()));
+        }
+    }
+    TabbableWidget::templateEditDlg->show();
+    if (!new_window)
+        ::bringToFront(TabbableWidget::templateEditDlg);
 }
 
 /**
--- git.orig/src/tabs/tabbablewidget.h
+++ git/src/tabs/tabbablewidget.h
@@ -24,6 +24,7 @@
 #include <QTimer>
 #include "advwidget.h"
 #include "im.h" // ChatState
+#include "sendbuttonmenu.h"
 
 namespace XMPP {
     class Jid;
@@ -69,6 +70,11 @@ public:
     virtual int unreadMessageCount() const = 0;
     virtual QString desiredCaption() const = 0;
 
+    // Templates
+    SendButtonTemplatesMenu* getTemplateMenu();
+    void showTemplateEditor();
+    // ---
+
 signals:
     void invalidateTabInfo();
     void updateFlashState();
@@ -96,6 +102,11 @@ private:
     PsiAccount *pa_;
     TabManager *tabManager_;
     QIcon icon_;
+    // Templates
+    static int chatsCount;
+    static SendButtonTemplatesMenu *templateMenu;
+    static QPointer<SendButtonTemplatesEditor> templateEditDlg;
+    // ---
 };
 
 #endif
