--- a/iris/src/xmpp/xmpp-im/client.cpp
+++ b/iris/src/xmpp/xmpp-im/client.cpp
@@ -93,6 +93,8 @@
 #define vsnprintf _vsnprintf
 #endif
 
+#define GROUPS_DELIMITER_TIMEOUT 10
+
 namespace XMPP {
 //----------------------------------------------------------------------------
 // Client
@@ -879,12 +881,37 @@ void Client::pmMessage(const Message &m)
 
 void Client::prRoster(const Roster &r) { importRoster(r); }
 
-void Client::rosterRequest()
+void Client::rosterRequest(bool withGroupsDelimiter)
 {
     if (!d->active)
         return;
 
-    JT_Roster *r = new JT_Roster(rootTask());
+    JT_Roster *r       = new JT_Roster(rootTask());
+    int        timeout = 0;
+    if (withGroupsDelimiter) {
+        connect(r, SIGNAL(finished()), SLOT(slotRosterDelimiterRequestFinished()));
+        r->getGroupsDelimiter();
+        // WORKAROUND: Some bad servers (Facebook for example) don't response
+        // on groups delimiter request. Wait timeout and go ahead.
+        r->setTimeout(GROUPS_DELIMITER_TIMEOUT);
+    } else {
+        connect(r, SIGNAL(finished()), SLOT(slotRosterRequestFinished()));
+        r->get();
+        d->roster.flagAllForDelete(); // mod_groups patch
+    }
+
+    r->go(true);
+}
+
+void Client::slotRosterDelimiterRequestFinished()
+{
+    JT_Roster *r = qobject_cast<JT_Roster *>(sender());
+    if (r->success()) {
+        d->roster.setGroupsDelimiter(r->groupsDelimiter());
+        emit rosterGroupsDelimiterRequestFinished(r->groupsDelimiter());
+    }
+
+    r = new JT_Roster(rootTask());
     connect(r, SIGNAL(finished()), SLOT(slotRosterRequestFinished()));
     r->get();
     d->roster.flagAllForDelete(); // mod_groups patch
@@ -1245,10 +1272,25 @@ void LiveRosterItem::setFlagForDelete(bool b) { v_flagForDelete = b; }
 //---------------------------------------------------------------------------
 // LiveRoster
 //---------------------------------------------------------------------------
-LiveRoster::LiveRoster() : QList<LiveRosterItem>() {}
+class LiveRoster::Private {
+public:
+    QString groupsDelimiter;
+};
+
+LiveRoster::LiveRoster() : QList<LiveRosterItem>(), d(new LiveRoster::Private) {}
+LiveRoster::LiveRoster(const LiveRoster &other) : QList<LiveRosterItem>(other), d(new LiveRoster::Private)
+{
+    d->groupsDelimiter = other.d->groupsDelimiter;
+}
 
-LiveRoster::~LiveRoster() {}
+LiveRoster::~LiveRoster() { delete d; }
 
+LiveRoster &LiveRoster::operator=(const LiveRoster &other)
+{
+    QList<LiveRosterItem>::operator=(other);
+    d->groupsDelimiter             = other.d->groupsDelimiter;
+    return *this;
+}
 void LiveRoster::flagAllForDelete()
 {
     for (Iterator it = begin(); it != end(); ++it)
@@ -1275,4 +1317,8 @@ LiveRoster::ConstIterator LiveRoster::find(const Jid &j, bool compareRes) const
     return it;
 }
 
+void LiveRoster::setGroupsDelimiter(const QString &groupsDelimiter) { d->groupsDelimiter = groupsDelimiter; }
+
+QString LiveRoster::groupsDelimiter() const { return d->groupsDelimiter; }
+
 }
--- a/iris/src/xmpp/xmpp-im/types.cpp
+++ b/iris/src/xmpp/xmpp-im/types.cpp
@@ -2656,9 +2656,26 @@ bool RosterItem::fromXml(const QDomElement &item)
 //---------------------------------------------------------------------------
 // Roster
 //---------------------------------------------------------------------------
-Roster::Roster() : QList<RosterItem>() {}
+class Roster::Private {
+public:
+    QString groupsDelimiter;
+};
+
+Roster::Roster() : QList<RosterItem>(), d(new Roster::Private) {}
+
+Roster::~Roster() { delete d; }
+
+Roster::Roster(const Roster &other) : QList<RosterItem>(other), d(new Roster::Private)
+{
+    d->groupsDelimiter = other.d->groupsDelimiter;
+}
 
-Roster::~Roster() {}
+Roster &Roster::operator=(const Roster &other)
+{
+    QList<RosterItem>::operator=(other);
+    d->groupsDelimiter         = other.d->groupsDelimiter;
+    return *this;
+}
 
 Roster::Iterator Roster::find(const Jid &j)
 {
@@ -2680,6 +2697,10 @@ Roster::ConstIterator Roster::find(const Jid &j) const
     return end();
 }
 
+void Roster::setGroupsDelimiter(const QString &groupsDelimiter) { d->groupsDelimiter = groupsDelimiter; }
+
+QString Roster::groupsDelimiter() const { return d->groupsDelimiter; }
+
 //---------------------------------------------------------------------------
 // FormField
 //---------------------------------------------------------------------------
--- a/iris/src/xmpp/xmpp-im/xmpp_client.h
+++ b/iris/src/xmpp/xmpp-im/xmpp_client.h
@@ -99,7 +99,7 @@ public:
     void                   setNetworkAccessManager(QNetworkAccessManager *qnam);
     QNetworkAccessManager *networkAccessManager() const;
 
-    void rosterRequest();
+    void rosterRequest(bool withGroupsDelimiter = true);
     void sendMessage(Message &);
     void sendSubscription(const Jid &, const QString &, const QString &nick = QString());
     void setPresence(const Status &);
@@ -165,6 +165,7 @@ signals:
     void activated();
     void disconnected();
     // void authFinished(bool, int, const QString &);
+    void rosterGroupsDelimiterRequestFinished(const QString &);
     void rosterRequestFinished(bool, int, const QString &);
     void rosterItemAdded(const RosterItem &);
     void rosterItemUpdated(const RosterItem &);
@@ -199,6 +200,7 @@ private slots:
     void streamIncomingXml(const QString &);
     void streamOutgoingXml(const QString &);
 
+    void slotRosterDelimiterRequestFinished();
     void slotRosterRequestFinished();
 
     // basic daemons
--- a/iris/src/xmpp/xmpp-im/xmpp_liveroster.h
+++ b/iris/src/xmpp/xmpp-im/xmpp_liveroster.h
@@ -29,11 +29,21 @@ class Jid;
 class LiveRoster : public QList<LiveRosterItem> {
 public:
     LiveRoster();
+    LiveRoster(const LiveRoster &other);
     ~LiveRoster();
 
+    LiveRoster &operator=(const LiveRoster &other);
+
     void                      flagAllForDelete();
     LiveRoster::Iterator      find(const Jid &, bool compareRes = true);
     LiveRoster::ConstIterator find(const Jid &, bool compareRes = true) const;
+
+    void    setGroupsDelimiter(const QString &groupsDelimiter);
+    QString groupsDelimiter() const;
+
+private:
+    class Private;
+    Private *d;
 };
 } // namespace XMPP
 
--- a/iris/src/xmpp/xmpp-im/xmpp_roster.h
+++ b/iris/src/xmpp/xmpp-im/xmpp_roster.h
@@ -32,14 +32,20 @@ class Jid;
 class Roster : public QList<RosterItem> {
 public:
     Roster();
+    Roster(const Roster &other);
     ~Roster();
 
+    Roster &operator=(const Roster &other);
+
     Roster::Iterator      find(const Jid &);
     Roster::ConstIterator find(const Jid &) const;
 
+    void    setGroupsDelimiter(const QString &groupsDelimiter);
+    QString groupsDelimiter() const;
+
 private:
-    class RosterPrivate;
-    RosterPrivate *d = nullptr;
+    class Private;
+    Private *d = nullptr;
 };
 } // namespace XMPP
 
--- a/iris/src/xmpp/xmpp-im/xmpp_tasks.cpp
+++ b/iris/src/xmpp/xmpp-im/xmpp_tasks.cpp
@@ -341,6 +341,7 @@ public:
     Private() = default;
 
     Roster             roster;
+    QString            groupsDelimiter;
     QList<QDomElement> itemList;
 };
 
@@ -376,7 +377,7 @@ void JT_Roster::set(const Jid &jid, const QString &name, const QStringList &grou
 
 void JT_Roster::remove(const Jid &jid)
 {
-    type = 1;
+    type = 2;
     // to = client()->host();
     QDomElement item = doc()->createElement("item");
     item.setAttribute("jid", jid.full());
@@ -384,11 +385,46 @@ void JT_Roster::remove(const Jid &jid)
     d->itemList += item;
 }
 
+void JT_Roster::getGroupsDelimiter()
+{
+    type = 3;
+    // to = client()->host();
+    iq = createIQ(doc(), "get", to.full(), id());
+
+    QDomElement roster = doc()->createElement("roster");
+    roster.setAttribute("xmlns", "roster:delimiter");
+
+    QDomElement query = doc()->createElement("query");
+    query.setAttribute("xmlns", "jabber:iq:private");
+    query.appendChild(roster);
+
+    iq.appendChild(query);
+}
+
+void JT_Roster::setGroupsDelimiter(const QString &groupsDelimiter)
+{
+    type = 4;
+    // to = client()->host();
+    iq = createIQ(doc(), "set", to.full(), id());
+
+    QDomText text = doc()->createTextNode(groupsDelimiter);
+
+    QDomElement roster = doc()->createElement("roster");
+    roster.setAttribute("xmlns", "roster:delimiter");
+    roster.appendChild(text);
+
+    QDomElement query = doc()->createElement("query");
+    query.setAttribute("xmlns", "jabber:iq:private");
+    query.appendChild(roster);
+
+    iq.appendChild(query);
+}
+
 void JT_Roster::onGo()
 {
     if (type == 0)
         send(iq);
-    else if (type == 1) {
+    else if (type == 1 || type == 2) {
         // to = client()->host();
         iq                = createIQ(doc(), "set", to.full(), id());
         QDomElement query = doc()->createElementNS("jabber:iq:roster", "query");
@@ -396,11 +432,17 @@ void JT_Roster::onGo()
         foreach (const QDomElement &it, d->itemList)
             query.appendChild(it);
         send(iq);
+    } else if (type == 3) {
+        send(iq);
+    } else if (type == 4) {
+        send(iq);
     }
 }
 
 const Roster &JT_Roster::roster() const { return d->roster; }
 
+QString JT_Roster::groupsDelimiter() const { return d->groupsDelimiter; }
+
 QString JT_Roster::toString() const
 {
     if (type != 1)
@@ -468,6 +510,23 @@ bool JT_Roster::take(const QDomElement &x)
         setSuccess();
         return true;
     }
+    // getGroupsDelimiter
+    else if (type == 3) {
+        if (x.attribute("type") == "result") {
+            QDomElement q         = queryTag(x);
+            QDomElement delimiter = q.firstChild().toElement();
+            d->groupsDelimiter    = delimiter.firstChild().toText().data();
+            setSuccess();
+        } else {
+            setError(x);
+        }
+        return true;
+    }
+    // setGroupsDelimiter
+    else if (type == 4) {
+        setSuccess();
+        return true;
+    }
 
     return false;
 }
--- a/iris/src/xmpp/xmpp-im/xmpp_tasks.h
+++ b/iris/src/xmpp/xmpp-im/xmpp_tasks.h
@@ -96,7 +96,12 @@ public:
     void set(const Jid &, const QString &name, const QStringList &groups);
     void remove(const Jid &);
 
+    // XEP-0083
+    void getGroupsDelimiter();
+    void setGroupsDelimiter(const QString &groupsDelimiter);
+
     const Roster &roster() const;
+    QString       groupsDelimiter() const;
 
     QString toString() const;
     bool    fromString(const QString &);
