--- git.orig/iconsets/system/default/icondef.xml
+++ git/iconsets/system/default/icondef.xml
@@ -769,6 +769,11 @@
 		<x xmlns='name'>psi/doubleBackArrow</x>
 		<object mime='image/png'>psiplus/doublebackarrow.png</object>
 	</icon>
+
+	<icon>
+		<x xmlns='name'>psi/pin</x>
+		<object mime='image/png'>psiplus/pin.png</object>
+	</icon>
 	<!-- End psi Plus icons -->
 
 	<!-- Icons for screenshot-plugin -->
--- git.orig/iconsets.qrc
+++ git/iconsets.qrc
@@ -145,6 +145,7 @@
         <file>iconsets/system/default/psiplus/draw.png</file>
         <file>iconsets/system/default/psiplus/frame.png</file>
         <file>iconsets/system/default/psiplus/palette.png</file>
+        <file>iconsets/system/default/psiplus/pin.png</file>
         <file>iconsets/system/default/psiplus/undo.png</file>
         <file>iconsets/system/default/psiplus/print.png</file>
         <file>iconsets/system/default/keys_64.png</file>
--- git.orig/options/default.xml
+++ git/options/default.xml
@@ -505,6 +505,9 @@ QLineEdit#le_status_text {
                 <tab-singles type="QString" comment="Tab types that would have been untabbed are given their own tabset. 'C' for chat and 'M' for mucs"/>
                 <use-tab-shortcuts type="bool">true</use-tab-shortcuts>
                 <show-tab-buttons type="bool">true</show-tab-buttons>
+                <multi-rows comment="Use multi rows mode for chat tab bar" type="bool">false</multi-rows>
+                <current-index-at-bottom comment="Move current row to bottom in multi-row mode" type="bool">true</current-index-at-bottom>
+                <disable-wheel-scroll type="bool">false</disable-wheel-scroll>
             </tabs>
         </ui>
         <shortcuts comment="Shortcuts">
@@ -572,6 +575,7 @@ QLineEdit#le_status_text {
                 <chat_icon type="QKeySequence"></chat_icon>
                 <chat_info type="QKeySequence"></chat_info>
                 <chat_pgp type="QKeySequence"></chat_pgp>
+                <chat_pin_tab type="QKeySequence"></chat_pin_tab>
                 <chat_ps type="QKeySequence"></chat_ps>
                 <chat_templates type="QKeySequence"></chat_templates>
                 <chat_voice type="QKeySequence"></chat_voice>
@@ -582,6 +586,7 @@ QLineEdit#le_status_text {
                 <gchat_icon type="QKeySequence"></gchat_icon>
                 <gchat_ps type="QKeySequence"></gchat_ps>
                 <gchat_templates type="QKeySequence"></gchat_templates>
+                <gchat_pin_tab type="QKeySequence"></gchat_pin_tab>
             </alist>
             <chat comment="Shortcuts in the chat dialog">
                 <next-tab type="QVariantList" comment="Switch to the next tab">
--- git.orig/src/groupchatdlg.cpp
+++ git/src/groupchatdlg.cpp
@@ -97,6 +97,7 @@
 #include "languagemanager.h"
 #include "filesharedlg.h"
 #include "filesharingmanager.h"
+#include "tabdlg.h"
 
 #ifdef Q_OS_WIN
 #include <windows.h>
@@ -260,6 +261,7 @@ public:
     int rosterSize;
 public:
     bool trackBar;
+    bool tabmode;
 
     int logHeight;
     int chateditHeight;
@@ -855,6 +857,7 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
     setAcceptDrops(true);
 
     ui_.setupUi(this);
+    d->tabmode = PsiOptions::instance()->getOption("options.ui.tabs.use-tabs").toBool();
     ui_.lb_ident->setAccount(account());
     ui_.lb_ident->setShowJid(false);
     ui_.log->setSessionData(true, false, jid(), jid().full()); //FIXME change conference name
@@ -937,6 +940,9 @@ GCMainDlg::GCMainDlg(PsiAccount *pa, con
         else if (name == QLatin1String("gchat_templates")) {
             action->setMenu(getTemplateMenu());
         }
+        else if (name == "gchat_pin_tab") {
+            connect(action, SIGNAL(triggered()), SLOT(pinTab()));
+        }
     }
 
     actList = account()->psi()->actionList()->actionLists(PsiActionList::Actions_Common).at(0);
@@ -2545,6 +2551,10 @@ void GCMainDlg::buildMenu()
     d->pm_settings->addAction(d->act_pastesend);
     d->pm_settings->addAction(d->act_nick);
     d->pm_settings->addAction(d->act_bookmark);
+    if (PsiOptions::instance()->getOption("options.ui.tabs.multi-rows").toBool() && d->tabmode) {
+        d->pm_settings->addSeparator();
+        d->pm_settings->addAction(d->actions->action("gchat_pin_tab"));
+    }
 #ifdef PSI_PLUGINS
     if(!PsiOptions::instance()->getOption("options.ui.contactlist.toolbars.m1.visible").toBool()) {
         d->pm_settings->addSeparator();
--- git.orig/src/psiactionlist.cpp
+++ git/src/psiactionlist.cpp
@@ -455,6 +455,7 @@ void PsiActionList::Private::createChat(
         IconAction *actActiveContacts = new IconAction (tr("Active contacts"), "psi/jabber", tr("Active contacts"), 0, this);
         IconAction *actShareFiles = new IconAction (tr("Share Files"), "psi/share_file", tr("Share Files"), 0, this);
         IconAction *actTemplates = new IconAction(tr("Templates"), "psi/action_templates", tr("Templates"), 0, this);
+        IconAction *actPinTab = new IconAction(tr("Pin/UnPin Tab"), "psi/pin", tr("Pin/UnPin Tab"), 0 , this);
 
         ActionNames actions[] = {
             { "chat_clear",  actClear  },
@@ -471,6 +472,7 @@ void PsiActionList::Private::createChat(
             { "chat_active_contacts", actActiveContacts   },
             { "chat_share_files", actShareFiles  },
             { "chat_templates", actTemplates },
+            { "chat_pin_tab", actPinTab },
             { "", nullptr }
         };
 
@@ -490,6 +492,7 @@ void PsiActionList::Private::createGroup
         IconAction *actIcon = new IconAction(tr("Select Icon"), "psi/smile", tr("Select Icon"), 0, this);
         IconAction *actShareFiles = new IconAction (tr("Share Files"), "psi/share_file", tr("Share Files"), 0, this);
         IconAction *actTemplates = new IconAction(tr("Templates"), "psi/action_templates", tr("Templates"), 0, this);
+        IconAction *actPinTab = new IconAction(tr("Pin/UnPin Tab"), "psi/pin", tr("Pin/UnPin Tab"), 0 , this);
 
         ActionNames actions[] = {
             { "gchat_clear",  actClear  },
@@ -499,6 +502,7 @@ void PsiActionList::Private::createGroup
             { "gchat_icon", actIcon   },
             { "gchat_share_files", actShareFiles   },
             { "gchat_templates", actTemplates },
+            { "gchat_pin_tab",   actPinTab    },
             { "", nullptr }
         };
 
--- git.orig/src/psichatdlg.cpp
+++ git/src/psichatdlg.cpp
@@ -50,6 +50,7 @@
 #include "actionlist.h"
 #include "psiactionlist.h"
 #include "filesharingmanager.h"
+#include "tabdlg.h"
 #ifdef PSI_PLUGINS
 #include "filesharedlg.h"
 #include "pluginmanager.h"
@@ -556,6 +557,9 @@ void PsiChatDlg::initToolButtons()
         else if (name == "chat_templates") {
             action->setMenu(getTemplateMenu());
         }
+        else if (name == "chat_pin_tab") {
+            connect(action, SIGNAL(triggered()), SLOT(pinTab()));
+        }
     }
 
     list = account()->psi()->actionList()->actionLists(PsiActionList::Actions_Common).at(0);
@@ -918,6 +922,11 @@ void PsiChatDlg::buildMenu()
 
     pm_settings_->addAction(actions_->action("chat_info"));
     pm_settings_->addAction(actions_->action("chat_history"));
+    auto dlg = getManagingTabDlg();
+    if (dlg && PsiOptions::instance()->getOption("options.ui.tabs.multi-rows").toBool()) {
+        pm_settings_->addAction(actions_->action("chat_pin_tab"));
+
+    } // else it's not tabbed dialog
 #ifdef PSI_PLUGINS
     if(!PsiOptions::instance()->getOption("options.ui.contactlist.toolbars.m0.visible").toBool()) {
         pm_settings_->addSeparator();
--- git.orig/src/tabs/tabbablewidget.cpp
+++ git/src/tabs/tabbablewidget.cpp
@@ -293,3 +293,8 @@ void TabbableWidget::hideTab()
     else
         hide();
 }
+
+void TabbableWidget::pinTab()
+{
+    getManagingTabDlg()->pinTab(this);
+}
--- git.orig/src/tabs/tabbablewidget.h
+++ git/src/tabs/tabbablewidget.h
@@ -87,6 +87,7 @@ public slots:
     void bringToFront(bool raiseWindow = true);
     virtual void ensureTabbedCorrectly();
     void hideTab();
+    void pinTab();
 
 protected:
     virtual void setJid(const Jid&);
--- git.orig/src/tabs/tabdlg.cpp
+++ git/src/tabs/tabdlg.cpp
@@ -267,6 +267,11 @@ void TabDlg::showTabMenu(int tab, QPoint
             tabMenu_->addMenu(sendTo);
         }
 
+        QAction *p = nullptr;
+        if (PsiOptions::instance()->getOption("options.ui.tabs.multi-rows", true).toBool()) {
+            p = tabMenu_->addAction(tabWidget_->isPagePinned(getTab(tab)) ? tr("Unpin Tab") : tr("Pin Tab"));
+        }
+
         QAction *act = tabMenu_->exec(pos);
         if (!act)
             return;
@@ -279,6 +284,9 @@ void TabDlg::showTabMenu(int tab, QPoint
         else if(act == h) {
             hideTab(getTab(tab));
         }
+        else if (p && act == p) {
+            pinTab(getTab(tab));
+        }
         else {
             TabDlg* target = sentTos[act];
             if (target)
@@ -424,6 +432,11 @@ void TabDlg::hideTab(TabbableWidget* tab
     closeTab(tab, false);
 }
 
+void TabDlg::pinTab(TabbableWidget* tab)
+{
+    tabWidget_->setPagePinned(tab, !tabWidget_->isPagePinned(tab));
+}
+
 void TabDlg::hideAllTab()
 {
     foreach(TabbableWidget* tab, tabs_)
@@ -904,6 +917,11 @@ void TabDlg::updateVSplitters(int log, i
     }
 }
 
+bool TabDlg::isTabPinned(QWidget *page)
+{
+    return tabWidget_->isPagePinned(page);
+}
+
 TabbableWidget* TabDlg::getCurrentTab() const
 {
     return dynamic_cast<TabbableWidget*>(tabWidget_->currentPage());
--- git.orig/src/tabs/tabdlg.h
+++ git/src/tabs/tabdlg.h
@@ -88,6 +88,8 @@ public:
     void setTabIcon(QWidget *,const QIcon &);
     TabbableWidget* getCurrentTab() const;
 
+    bool isTabPinned(QWidget *page);
+
 protected:
     void setShortcuts();
 
@@ -123,6 +125,7 @@ public slots:
     void sendTabTo(TabbableWidget*, TabDlg *);
     void tabCloseRequested(int i);
     void hideTab(TabbableWidget*);
+    void pinTab(TabbableWidget *tab);
     void hideCurrentTab();
     void hideAllTab();
 
--- git.orig/src/widgets/psitabwidget.cpp
+++ git/src/widgets/psitabwidget.cpp
@@ -37,7 +37,11 @@ PsiTabWidget::PsiTabWidget(QWidget *pare
         : QWidget(parent) {
     tabsPosition_ = QTabWidget::East; // impossible => uninitialised state
     tabBar_ = new PsiTabBar(this);
-    tabBar_->setUsesScrollButtons(true);
+    bool multiRow = PsiOptions::instance()->getOption("options.ui.tabs.multi-rows", true).toBool();
+    bool currentIndexAlwaysAtBottom  = PsiOptions::instance()->getOption("options.ui.tabs.current-index-at-bottom", true).toBool();
+    tabBar_->setMultiRow(multiRow);
+    tabBar_->setUsesScrollButtons(!multiRow);
+    tabBar_->setCurrentIndexAlwaysAtBottom(currentIndexAlwaysAtBottom);
     layout_ = new QVBoxLayout(this);
     layout_->setMargin(0);
     layout_->setSpacing(0);
@@ -54,19 +58,21 @@ PsiTabWidget::PsiTabWidget(QWidget *pare
     downButton_ = new QToolButton(this);
     downButton_->setMinimumSize(3,3);
     downButton_->setFixedWidth(buttonwidth);
-    downButton_->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Minimum);
+    downButton_->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
     menu_ = new QMenu(this);
     downButton_->setMenu(menu_);
     downButton_->setStyleSheet(" QToolButton::menu-indicator { image:none } ");
     connect(menu_, SIGNAL(aboutToShow()), SLOT(menu_aboutToShow()));
     connect(menu_, SIGNAL(triggered(QAction*)), SLOT(menu_triggered(QAction*)));
     barLayout_->addWidget(downButton_);
+    barLayout_->setAlignment(downButton_, Qt::AlignBottom);
 
     closeButton_ = new QToolButton(this);
     closeButton_->setMinimumSize(3,3);
     closeButton_->setFixedWidth(buttonwidth);
-    closeButton_->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Minimum);
+    closeButton_->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
     barLayout_->addWidget(closeButton_);
+    barLayout_->setAlignment(closeButton_, Qt::AlignBottom);
     closeButton_->setText("x");
     downButton_->setArrowType(Qt::DownArrow);
     downButton_->setPopupMode(QToolButton::InstantPopup);
@@ -75,20 +81,22 @@ PsiTabWidget::PsiTabWidget(QWidget *pare
     setTabPosition(QTabWidget::North);
     setLooks();
 
-    if (!PsiOptions::instance()->getOption("options.ui.tabs.show-tab-close-buttons").toBool()){
-        tabBar_->setTabsClosable(false);
-    }
     if (!PsiOptions::instance()->getOption("options.ui.tabs.show-tab-buttons").toBool()){
         closeButton_->hide();
         downButton_->hide();
     }
-    connect(tabBar_, SIGNAL(mouseDoubleClickTab(int)), SLOT(mouseDoubleClickTab(int)));
-    connect(tabBar_, SIGNAL(mouseMiddleClickTab(int)), SLOT(mouseMiddleClickTab(int)));
-    connect(tabBar_, SIGNAL( currentChanged(int)), SLOT(tab_currentChanged(int)));
-    connect(tabBar_, SIGNAL( contextMenu(QContextMenuEvent*,int)), SLOT( tab_contextMenu(QContextMenuEvent*,int)));
+    if (!PsiOptions::instance()->getOption("options.ui.tabs.show-tab-close-buttons").toBool()){
+        tabBar_->setTabsClosable(false);
+    }
+
+    connect( tabBar_, SIGNAL(mouseDoubleClickTab(int)), SLOT(mouseDoubleClickTab(int)));
+    connect( tabBar_, SIGNAL(mouseMiddleClickTab(int)), SLOT(mouseMiddleClickTab(int)));
+    // TabBar::tabRemove must be handled before tab_currentChanged
+    connect( tabBar_, SIGNAL( currentChanged(int)), SLOT(tab_currentChanged(int)));
+    connect( tabBar_, SIGNAL( contextMenu(QContextMenuEvent*,int)), SLOT( tab_contextMenu(QContextMenuEvent*,int)));
+    connect( closeButton_, SIGNAL(clicked()), SIGNAL(closeButtonClicked()));
     connect(tabBar_, SIGNAL(tabMoved(int,int)),SLOT(widgetMoved(int,int)));
     connect(tabBar_, SIGNAL(tabCloseRequested(int)),SIGNAL(tabCloseRequested(int)));
-    connect(closeButton_, SIGNAL(clicked()), SIGNAL(closeButtonClicked()));
 }
 
 void PsiTabWidget::setCloseIcon(const QIcon& icon) {
@@ -179,6 +187,7 @@ void PsiTabWidget::addTab(QWidget *widge
         tabBar_->addTab(name);
     setLooks();
     showPage(currentPage());
+    tabBar_->layoutTabs();
 }
 
 void PsiTabWidget::setLooks()
@@ -189,6 +198,14 @@ void PsiTabWidget::setLooks()
     }
 }
 
+void PsiTabWidget::resizeEvent(QResizeEvent *event)
+{
+    QWidget::resizeEvent(event);
+    if (tabBar_->multiRow()) {
+        tabBar_->layoutTabs();
+    }
+}
+
 /**
  * Selects the page for the specified widget.
  */
@@ -216,6 +233,27 @@ void PsiTabWidget::showPageDirectly(QWid
     }
 }
 
+void PsiTabWidget::setPagePinned(QWidget *page, bool pinned)
+{
+    foreach (QWidget *w, widgets_) {
+        if (w == page) {
+            tabBar_->setTabPinned(widgets_.indexOf(w), pinned);
+            showPageDirectly(page);
+            break;
+        }
+    }
+}
+
+bool PsiTabWidget::isPagePinned(QWidget *page)
+{
+    foreach (QWidget *w, widgets_) {
+        if(w == page) {
+            return tabBar_->isTabPinned(widgets_.indexOf(w));
+        }
+    }
+    return false;
+}
+
 /**
  * Removes the page for the specified widget.
  */
@@ -360,7 +398,12 @@ void PsiTabWidget::setTabButtonsShown(bo
  * Enable/disable dragging of tabs
  */
 void PsiTabWidget::setDragsEnabled(bool enabled) {
-    ((PsiTabBar *)tabBar_)->setDragsEnabled(enabled);
+    static_cast<PsiTabBar *>(tabBar_)->setDragsEnabled(enabled);
+}
+
+void PsiTabWidget::setTabBarUpdateEnabled(bool b)
+{
+    tabBar_->setUpdateEnabled(b);
 }
 
 void PsiTabWidget::widgetMoved(int from, int to)
--- git.orig/src/widgets/psitabwidget.h
+++ git/src/widgets/psitabwidget.h
@@ -21,7 +21,6 @@
 #define PSITABWIDGET_H
 
 #include <QTabWidget>
-#include <QTabBar>
 #include <QDragEnterEvent>
 #include "psitabbar.h"
 
@@ -51,6 +50,9 @@ public:
     void showPage(QWidget *);
     void showPageDirectly(QWidget *);
 
+    void setPagePinned(QWidget *page, bool pinned);
+    bool isPagePinned(QWidget *page);
+
     void removePage(QWidget *);
     QWidget* page(int index);
     int getIndex(QWidget *);
@@ -63,6 +65,8 @@ public:
     void setTabButtonsShown(bool shown); // default shown
     void setDragsEnabled(bool enabled);  // default enabled
 
+    void setTabBarUpdateEnabled(bool b);
+
 public slots:
     void setCurrentPage(int);
     void removeCurrentPage();
@@ -79,6 +83,9 @@ signals:
     // context menu on the blank space will have tab==-1
     void tabContextMenu(int tab, QPoint pos, QContextMenuEvent *event);
 
+protected:
+    void resizeEvent(QResizeEvent *event);
+
 private slots:
     void mouseDoubleClickTab(int tab);
     void mouseMiddleClickTab(int tab);
@@ -90,7 +97,7 @@ private slots:
 
 private:
     QVector<QWidget*> widgets_;
-    QTabBar *tabBar_;
+    PsiTabBar *tabBar_;
     QVBoxLayout *layout_;
     QHBoxLayout *barLayout_;
     QStackedLayout *stacked_;
